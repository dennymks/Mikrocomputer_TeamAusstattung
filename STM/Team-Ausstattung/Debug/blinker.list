
blinker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800311c  0800311c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003134  08003134  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800313c  0800313c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800313c  0800313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003140  08003140  00013140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000124  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000130  20000130  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b25e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001fb5  00000000  00000000  0002b2dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000958  00000000  00000000  0002d298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000071e  00000000  00000000  0002dbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000208ae  00000000  00000000  0002e30e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000bccf  00000000  00000000  0004ebbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf7d6  00000000  00000000  0005a88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002460  00000000  00000000  0012a064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0012c4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003104 	.word	0x08003104

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08003104 	.word	0x08003104

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <LED_Init>:
#include "blinker_led.h"


//---Initalisierungsfunktion---

void LED_Init(void){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08e      	sub	sp, #56	; 0x38
 80004d0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]
	//Clock für Ports aktivieren

	if (LED_PORT_LINKS == GPIOA){ __HAL_RCC_GPIOA_CLK_ENABLE();}
	else if (LED_PORT_LINKS == GPIOB){ __HAL_RCC_GPIOB_CLK_ENABLE();}
	else if (LED_PORT_LINKS == GPIOC){ __HAL_RCC_GPIOC_CLK_ENABLE();}
	else if (LED_PORT_LINKS == GPIOD){ __HAL_RCC_GPIOD_CLK_ENABLE();}
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	4b3c      	ldr	r3, [pc, #240]	; (80005d8 <LED_Init+0x10c>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a3b      	ldr	r2, [pc, #236]	; (80005d8 <LED_Init+0x10c>)
 80004ec:	f043 0308 	orr.w	r3, r3, #8
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b39      	ldr	r3, [pc, #228]	; (80005d8 <LED_Init+0x10c>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0308 	and.w	r3, r3, #8
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	697b      	ldr	r3, [r7, #20]

	if (LED_PORT_RECHTS == GPIOA){ __HAL_RCC_GPIOA_CLK_ENABLE();}
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]
 8000502:	4b35      	ldr	r3, [pc, #212]	; (80005d8 <LED_Init+0x10c>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a34      	ldr	r2, [pc, #208]	; (80005d8 <LED_Init+0x10c>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b32      	ldr	r3, [pc, #200]	; (80005d8 <LED_Init+0x10c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]

	//Konfiguartion Blinker Links

	//Konfiguration für rote LED

	GPIO_InitStruct.Pin = RED_LED_PIN;
 800051a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800051e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000520:	2301      	movs	r3, #1
 8000522:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000528:	2300      	movs	r3, #0
 800052a:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(LED_PORT_LINKS, &GPIO_InitStruct);
 800052c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000530:	4619      	mov	r1, r3
 8000532:	482a      	ldr	r0, [pc, #168]	; (80005dc <LED_Init+0x110>)
 8000534:	f001 f964 	bl	8001800 <HAL_GPIO_Init>

	// Konfiguration für grüne LED

    GPIO_InitStruct.Pin = GREEN_LED_PIN;
 8000538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2300      	movs	r3, #0
 8000548:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(LED_PORT_LINKS, &GPIO_InitStruct);
 800054a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800054e:	4619      	mov	r1, r3
 8000550:	4822      	ldr	r0, [pc, #136]	; (80005dc <LED_Init+0x110>)
 8000552:	f001 f955 	bl	8001800 <HAL_GPIO_Init>

	// Konfiguration für blaue LED

    GPIO_InitStruct.Pin = BLUE_LED_PIN;
 8000556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800055a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2300      	movs	r3, #0
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(LED_PORT_LINKS, &GPIO_InitStruct);
 8000568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056c:	4619      	mov	r1, r3
 800056e:	481b      	ldr	r0, [pc, #108]	; (80005dc <LED_Init+0x110>)
 8000570:	f001 f946 	bl	8001800 <HAL_GPIO_Init>

    //Konfiguartion Blinker Rechts

    //Konfiguration für rote LED

    GPIO_InitStruct.Pin = RED_LED_PIN;
 8000574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
   	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	2301      	movs	r3, #1
 800057c:	62bb      	str	r3, [r7, #40]	; 0x28
   	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	62fb      	str	r3, [r7, #44]	; 0x2c
   	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	2300      	movs	r3, #0
 8000584:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(LED_PORT_RECHTS, &GPIO_InitStruct);
 8000586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058a:	4619      	mov	r1, r3
 800058c:	4814      	ldr	r0, [pc, #80]	; (80005e0 <LED_Init+0x114>)
 800058e:	f001 f937 	bl	8001800 <HAL_GPIO_Init>

   	// Konfiguration für grüne LED

    GPIO_InitStruct.Pin = GREEN_LED_PIN;
 8000592:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a0:	2300      	movs	r3, #0
 80005a2:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(LED_PORT_RECHTS, &GPIO_InitStruct);
 80005a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a8:	4619      	mov	r1, r3
 80005aa:	480d      	ldr	r0, [pc, #52]	; (80005e0 <LED_Init+0x114>)
 80005ac:	f001 f928 	bl	8001800 <HAL_GPIO_Init>

    // Konfiguration für blaue LED

    GPIO_InitStruct.Pin = BLUE_LED_PIN;
 80005b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(LED_PORT_RECHTS, &GPIO_InitStruct);
 80005c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c6:	4619      	mov	r1, r3
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <LED_Init+0x114>)
 80005ca:	f001 f919 	bl	8001800 <HAL_GPIO_Init>

}
 80005ce:	bf00      	nop
 80005d0:	3738      	adds	r7, #56	; 0x38
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40020c00 	.word	0x40020c00
 80005e0:	40020000 	.word	0x40020000

080005e4 <LED_On>:
/*----Einschaltfunktion----
Schaltet LEDs eines Blinkers auf die angegebene Farbe
Funktion ist absolut, d.h. es wird immer auf die angegebene Farbe umgeschalten
egal welche Farbe vorher geleuchtet hat
*/
void LED_On(uint8_t colour, uint8_t Blinker){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	460a      	mov	r2, r1
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	4613      	mov	r3, r2
 80005f2:	71bb      	strb	r3, [r7, #6]
	GPIO_TypeDef* gpio_port = NULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]

	//Blinkerportauswählen

	if (Blinker == BLINKERLINKS){
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	2b2b      	cmp	r3, #43	; 0x2b
 80005fc:	d102      	bne.n	8000604 <LED_On+0x20>
		gpio_port = LED_PORT_LINKS;
 80005fe:	4b3d      	ldr	r3, [pc, #244]	; (80006f4 <LED_On+0x110>)
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e001      	b.n	8000608 <LED_On+0x24>
	}
	else gpio_port = LED_PORT_RECHTS;
 8000604:	4b3c      	ldr	r3, [pc, #240]	; (80006f8 <LED_On+0x114>)
 8000606:	60fb      	str	r3, [r7, #12]

	switch (colour)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	3b01      	subs	r3, #1
 800060c:	2b04      	cmp	r3, #4
 800060e:	d86c      	bhi.n	80006ea <LED_On+0x106>
 8000610:	a201      	add	r2, pc, #4	; (adr r2, 8000618 <LED_On+0x34>)
 8000612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000616:	bf00      	nop
 8000618:	0800062d 	.word	0x0800062d
 800061c:	08000653 	.word	0x08000653
 8000620:	08000679 	.word	0x08000679
 8000624:	0800069f 	.word	0x0800069f
 8000628:	080006c5 	.word	0x080006c5
	{
		//schaltet LEDs auf Rot
		case RED:
			HAL_GPIO_WritePin(gpio_port, RED_LED_PIN, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000632:	68f8      	ldr	r0, [r7, #12]
 8000634:	f001 fa98 	bl	8001b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_port, GREEN_LED_PIN, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063e:	68f8      	ldr	r0, [r7, #12]
 8000640:	f001 fa92 	bl	8001b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_port, BLUE_LED_PIN, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064a:	68f8      	ldr	r0, [r7, #12]
 800064c:	f001 fa8c 	bl	8001b68 <HAL_GPIO_WritePin>
			break;
 8000650:	e04c      	b.n	80006ec <LED_On+0x108>
		//schaltet LEDs auf Grün
		case GREEN:
			HAL_GPIO_WritePin(gpio_port, GREEN_LED_PIN, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000658:	68f8      	ldr	r0, [r7, #12]
 800065a:	f001 fa85 	bl	8001b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_port, RED_LED_PIN, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f001 fa7f 	bl	8001b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_port, BLUE_LED_PIN, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f001 fa79 	bl	8001b68 <HAL_GPIO_WritePin>
			break;
 8000676:	e039      	b.n	80006ec <LED_On+0x108>
		//schaltet LEDs auf Blau
		case BLUE:
			HAL_GPIO_WritePin(gpio_port, BLUE_LED_PIN, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	68f8      	ldr	r0, [r7, #12]
 8000680:	f001 fa72 	bl	8001b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_port, RED_LED_PIN, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068a:	68f8      	ldr	r0, [r7, #12]
 800068c:	f001 fa6c 	bl	8001b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_port, GREEN_LED_PIN, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f001 fa66 	bl	8001b68 <HAL_GPIO_WritePin>
			break;
 800069c:	e026      	b.n	80006ec <LED_On+0x108>
		//schaltet LEDs auf Orange
		case ORANGE:
			HAL_GPIO_WritePin(gpio_port, RED_LED_PIN, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a4:	68f8      	ldr	r0, [r7, #12]
 80006a6:	f001 fa5f 	bl	8001b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_port, GREEN_LED_PIN, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f001 fa59 	bl	8001b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_port, BLUE_LED_PIN, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	68f8      	ldr	r0, [r7, #12]
 80006be:	f001 fa53 	bl	8001b68 <HAL_GPIO_WritePin>
			break;
 80006c2:	e013      	b.n	80006ec <LED_On+0x108>
		//schaltet LEDs auf Weiß
		case WHITE:
			HAL_GPIO_WritePin(gpio_port, RED_LED_PIN, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ca:	68f8      	ldr	r0, [r7, #12]
 80006cc:	f001 fa4c 	bl	8001b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_port, GREEN_LED_PIN, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d6:	68f8      	ldr	r0, [r7, #12]
 80006d8:	f001 fa46 	bl	8001b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_port, BLUE_LED_PIN, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	f001 fa40 	bl	8001b68 <HAL_GPIO_WritePin>
			break;
 80006e8:	e000      	b.n	80006ec <LED_On+0x108>
		//bei fehlerhafter Eingabe wird nix gemacht
		default: break;
 80006ea:	bf00      	nop
	}
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40020c00 	.word	0x40020c00
 80006f8:	40020000 	.word	0x40020000

080006fc <LED_Off>:
		LEd_Off(RED, BLINKERRECHTS)
		Grün leuchtet weiter
*/


void LED_Off(uint8_t colour, uint8_t Blinker){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	460a      	mov	r2, r1
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	4613      	mov	r3, r2
 800070a:	71bb      	strb	r3, [r7, #6]

	GPIO_TypeDef* gpio_port = NULL;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]

	//Blinkerportauswählen

	if (Blinker == BLINKERLINKS){
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	2b2b      	cmp	r3, #43	; 0x2b
 8000714:	d102      	bne.n	800071c <LED_Off+0x20>
		 gpio_port = LED_PORT_LINKS;
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <LED_Off+0xbc>)
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	e001      	b.n	8000720 <LED_Off+0x24>
	}
	else gpio_port = LED_PORT_RECHTS;
 800071c:	4b27      	ldr	r3, [pc, #156]	; (80007bc <LED_Off+0xc0>)
 800071e:	60fb      	str	r3, [r7, #12]



	switch (colour)
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	3b01      	subs	r3, #1
 8000724:	2b04      	cmp	r3, #4
 8000726:	d842      	bhi.n	80007ae <LED_Off+0xb2>
 8000728:	a201      	add	r2, pc, #4	; (adr r2, 8000730 <LED_Off+0x34>)
 800072a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072e:	bf00      	nop
 8000730:	08000745 	.word	0x08000745
 8000734:	08000753 	.word	0x08000753
 8000738:	08000761 	.word	0x08000761
 800073c:	0800076f 	.word	0x0800076f
 8000740:	08000789 	.word	0x08000789
		{
			//schaltet Farbe Rot aus
			case RED:
				HAL_GPIO_WritePin(gpio_port, RED_LED_PIN, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f001 fa0c 	bl	8001b68 <HAL_GPIO_WritePin>
				break;
 8000750:	e02e      	b.n	80007b0 <LED_Off+0xb4>
			//schaltet Farbe Grün aus
			case GREEN:
				HAL_GPIO_WritePin(gpio_port, GREEN_LED_PIN, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000758:	68f8      	ldr	r0, [r7, #12]
 800075a:	f001 fa05 	bl	8001b68 <HAL_GPIO_WritePin>
				break;
 800075e:	e027      	b.n	80007b0 <LED_Off+0xb4>
			//schaltet Farbe Blau aus
			case BLUE:
				HAL_GPIO_WritePin(gpio_port, BLUE_LED_PIN, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	f001 f9fe 	bl	8001b68 <HAL_GPIO_WritePin>
				break;
 800076c:	e020      	b.n	80007b0 <LED_Off+0xb4>
			//schaltet Farbe Orange aus
			case ORANGE:
				HAL_GPIO_WritePin(gpio_port, RED_LED_PIN, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	f001 f9f7 	bl	8001b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(gpio_port, GREEN_LED_PIN, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000780:	68f8      	ldr	r0, [r7, #12]
 8000782:	f001 f9f1 	bl	8001b68 <HAL_GPIO_WritePin>
				break;
 8000786:	e013      	b.n	80007b0 <LED_Off+0xb4>
			//schaltet Farbe Weiß aus
			case WHITE:
				HAL_GPIO_WritePin(gpio_port, RED_LED_PIN, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078e:	68f8      	ldr	r0, [r7, #12]
 8000790:	f001 f9ea 	bl	8001b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(gpio_port, GREEN_LED_PIN, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f001 f9e4 	bl	8001b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(gpio_port, BLUE_LED_PIN, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a6:	68f8      	ldr	r0, [r7, #12]
 80007a8:	f001 f9de 	bl	8001b68 <HAL_GPIO_WritePin>
				break;
 80007ac:	e000      	b.n	80007b0 <LED_Off+0xb4>
			//bei Fehlerhafter Eingabe passiert nix
			default: break;
 80007ae:	bf00      	nop
		}

}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40020c00 	.word	0x40020c00
 80007bc:	40020000 	.word	0x40020000

080007c0 <LED_Toggle>:
Übeprüft ob eine Mischfarbe oder die Farbe noch nicht eingeschaltet war falls ja wird erstmal die angegebene Farbe eingechaltet
sonst wird die Farbe bei dem jeweiligen Aufruf aus oder angeschalten
*/


void LED_Toggle(uint8_t colour, uint8_t Blinker){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	460a      	mov	r2, r1
 80007ca:	71fb      	strb	r3, [r7, #7]
 80007cc:	4613      	mov	r3, r2
 80007ce:	71bb      	strb	r3, [r7, #6]

	GPIO_TypeDef* gpio_port = NULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]

	//Blinkerportauswählen
	if (Blinker == BLINKERLINKS){
 80007d4:	79bb      	ldrb	r3, [r7, #6]
 80007d6:	2b2b      	cmp	r3, #43	; 0x2b
 80007d8:	d102      	bne.n	80007e0 <LED_Toggle+0x20>
			gpio_port = LED_PORT_LINKS;
 80007da:	4b63      	ldr	r3, [pc, #396]	; (8000968 <LED_Toggle+0x1a8>)
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	e001      	b.n	80007e4 <LED_Toggle+0x24>
	}
	else gpio_port = LED_PORT_RECHTS;
 80007e0:	4b62      	ldr	r3, [pc, #392]	; (800096c <LED_Toggle+0x1ac>)
 80007e2:	60fb      	str	r3, [r7, #12]



	switch (colour)
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	f200 80b8 	bhi.w	800095e <LED_Toggle+0x19e>
 80007ee:	a201      	add	r2, pc, #4	; (adr r2, 80007f4 <LED_Toggle+0x34>)
 80007f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f4:	08000809 	.word	0x08000809
 80007f8:	08000851 	.word	0x08000851
 80007fc:	08000899 	.word	0x08000899
 8000800:	080008e1 	.word	0x080008e1
 8000804:	08000923 	.word	0x08000923
			{
				//Toggled Rot
				case RED:
					if(Colour_Status(ORANGE, Blinker) || Colour_Status(WHITE, Blinker) || !Colour_Status(RED, Blinker))
 8000808:	79bb      	ldrb	r3, [r7, #6]
 800080a:	4619      	mov	r1, r3
 800080c:	2004      	movs	r0, #4
 800080e:	f000 f907 	bl	8000a20 <Colour_Status>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d10f      	bne.n	8000838 <LED_Toggle+0x78>
 8000818:	79bb      	ldrb	r3, [r7, #6]
 800081a:	4619      	mov	r1, r3
 800081c:	2005      	movs	r0, #5
 800081e:	f000 f8ff 	bl	8000a20 <Colour_Status>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d107      	bne.n	8000838 <LED_Toggle+0x78>
 8000828:	79bb      	ldrb	r3, [r7, #6]
 800082a:	4619      	mov	r1, r3
 800082c:	2001      	movs	r0, #1
 800082e:	f000 f8f7 	bl	8000a20 <Colour_Status>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d105      	bne.n	8000844 <LED_Toggle+0x84>
						{
							LED_On(RED, Blinker);
 8000838:	79bb      	ldrb	r3, [r7, #6]
 800083a:	4619      	mov	r1, r3
 800083c:	2001      	movs	r0, #1
 800083e:	f7ff fed1 	bl	80005e4 <LED_On>
						}

					else {HAL_GPIO_TogglePin(gpio_port, RED_LED_PIN);}

					break;
 8000842:	e08d      	b.n	8000960 <LED_Toggle+0x1a0>
					else {HAL_GPIO_TogglePin(gpio_port, RED_LED_PIN);}
 8000844:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000848:	68f8      	ldr	r0, [r7, #12]
 800084a:	f001 f9a6 	bl	8001b9a <HAL_GPIO_TogglePin>
					break;
 800084e:	e087      	b.n	8000960 <LED_Toggle+0x1a0>

				//Toggled Grün
				case GREEN:
					if(!Colour_Status(GREEN, Blinker) || Colour_Status(WHITE, Blinker) || Colour_Status(ORANGE, Blinker))
 8000850:	79bb      	ldrb	r3, [r7, #6]
 8000852:	4619      	mov	r1, r3
 8000854:	2002      	movs	r0, #2
 8000856:	f000 f8e3 	bl	8000a20 <Colour_Status>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00f      	beq.n	8000880 <LED_Toggle+0xc0>
 8000860:	79bb      	ldrb	r3, [r7, #6]
 8000862:	4619      	mov	r1, r3
 8000864:	2005      	movs	r0, #5
 8000866:	f000 f8db 	bl	8000a20 <Colour_Status>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d107      	bne.n	8000880 <LED_Toggle+0xc0>
 8000870:	79bb      	ldrb	r3, [r7, #6]
 8000872:	4619      	mov	r1, r3
 8000874:	2004      	movs	r0, #4
 8000876:	f000 f8d3 	bl	8000a20 <Colour_Status>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d005      	beq.n	800088c <LED_Toggle+0xcc>
					{
						LED_On(GREEN, Blinker);
 8000880:	79bb      	ldrb	r3, [r7, #6]
 8000882:	4619      	mov	r1, r3
 8000884:	2002      	movs	r0, #2
 8000886:	f7ff fead 	bl	80005e4 <LED_On>
					}
					else {HAL_GPIO_TogglePin(gpio_port, GREEN_LED_PIN);}

					break;
 800088a:	e069      	b.n	8000960 <LED_Toggle+0x1a0>
					else {HAL_GPIO_TogglePin(gpio_port, GREEN_LED_PIN);}
 800088c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000890:	68f8      	ldr	r0, [r7, #12]
 8000892:	f001 f982 	bl	8001b9a <HAL_GPIO_TogglePin>
					break;
 8000896:	e063      	b.n	8000960 <LED_Toggle+0x1a0>

				//Toggled Blue
				case BLUE:
					if(!Colour_Status(BLUE, Blinker) || Colour_Status(WHITE, Blinker) || Colour_Status(ORANGE, Blinker))
 8000898:	79bb      	ldrb	r3, [r7, #6]
 800089a:	4619      	mov	r1, r3
 800089c:	2003      	movs	r0, #3
 800089e:	f000 f8bf 	bl	8000a20 <Colour_Status>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d00f      	beq.n	80008c8 <LED_Toggle+0x108>
 80008a8:	79bb      	ldrb	r3, [r7, #6]
 80008aa:	4619      	mov	r1, r3
 80008ac:	2005      	movs	r0, #5
 80008ae:	f000 f8b7 	bl	8000a20 <Colour_Status>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d107      	bne.n	80008c8 <LED_Toggle+0x108>
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	4619      	mov	r1, r3
 80008bc:	2004      	movs	r0, #4
 80008be:	f000 f8af 	bl	8000a20 <Colour_Status>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d005      	beq.n	80008d4 <LED_Toggle+0x114>
					{
						LED_On(BLUE, Blinker);
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	4619      	mov	r1, r3
 80008cc:	2003      	movs	r0, #3
 80008ce:	f7ff fe89 	bl	80005e4 <LED_On>
					}

					else {HAL_GPIO_TogglePin(gpio_port, BLUE_LED_PIN);}

					break;
 80008d2:	e045      	b.n	8000960 <LED_Toggle+0x1a0>
					else {HAL_GPIO_TogglePin(gpio_port, BLUE_LED_PIN);}
 80008d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d8:	68f8      	ldr	r0, [r7, #12]
 80008da:	f001 f95e 	bl	8001b9a <HAL_GPIO_TogglePin>
					break;
 80008de:	e03f      	b.n	8000960 <LED_Toggle+0x1a0>

				//Toggled Orange
				case ORANGE:
					if(!Colour_Status(ORANGE, Blinker) || Colour_Status(WHITE, Blinker))
 80008e0:	79bb      	ldrb	r3, [r7, #6]
 80008e2:	4619      	mov	r1, r3
 80008e4:	2004      	movs	r0, #4
 80008e6:	f000 f89b 	bl	8000a20 <Colour_Status>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d007      	beq.n	8000900 <LED_Toggle+0x140>
 80008f0:	79bb      	ldrb	r3, [r7, #6]
 80008f2:	4619      	mov	r1, r3
 80008f4:	2005      	movs	r0, #5
 80008f6:	f000 f893 	bl	8000a20 <Colour_Status>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d005      	beq.n	800090c <LED_Toggle+0x14c>
						{
							LED_On(ORANGE, Blinker);
 8000900:	79bb      	ldrb	r3, [r7, #6]
 8000902:	4619      	mov	r1, r3
 8000904:	2004      	movs	r0, #4
 8000906:	f7ff fe6d 	bl	80005e4 <LED_On>
					else{
						HAL_GPIO_TogglePin(gpio_port, RED_LED_PIN);
						HAL_GPIO_TogglePin(gpio_port, GREEN_LED_PIN);
						}

					break;
 800090a:	e029      	b.n	8000960 <LED_Toggle+0x1a0>
						HAL_GPIO_TogglePin(gpio_port, RED_LED_PIN);
 800090c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000910:	68f8      	ldr	r0, [r7, #12]
 8000912:	f001 f942 	bl	8001b9a <HAL_GPIO_TogglePin>
						HAL_GPIO_TogglePin(gpio_port, GREEN_LED_PIN);
 8000916:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091a:	68f8      	ldr	r0, [r7, #12]
 800091c:	f001 f93d 	bl	8001b9a <HAL_GPIO_TogglePin>
					break;
 8000920:	e01e      	b.n	8000960 <LED_Toggle+0x1a0>

				//Toggled Weiß
				case WHITE:
					if(!Colour_Status(WHITE, Blinker))
 8000922:	79bb      	ldrb	r3, [r7, #6]
 8000924:	4619      	mov	r1, r3
 8000926:	2005      	movs	r0, #5
 8000928:	f000 f87a 	bl	8000a20 <Colour_Status>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d105      	bne.n	800093e <LED_Toggle+0x17e>
						{
							LED_On(WHITE, Blinker);
 8000932:	79bb      	ldrb	r3, [r7, #6]
 8000934:	4619      	mov	r1, r3
 8000936:	2005      	movs	r0, #5
 8000938:	f7ff fe54 	bl	80005e4 <LED_On>
							break;
 800093c:	e010      	b.n	8000960 <LED_Toggle+0x1a0>
						}

					else{
						HAL_GPIO_TogglePin(gpio_port, RED_LED_PIN);
 800093e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	f001 f929 	bl	8001b9a <HAL_GPIO_TogglePin>
						HAL_GPIO_TogglePin(gpio_port, GREEN_LED_PIN);
 8000948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f001 f924 	bl	8001b9a <HAL_GPIO_TogglePin>
						HAL_GPIO_TogglePin(gpio_port, BLUE_LED_PIN);
 8000952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f001 f91f 	bl	8001b9a <HAL_GPIO_TogglePin>
						break;
 800095c:	e000      	b.n	8000960 <LED_Toggle+0x1a0>
					}

			//Toggled nichts bei fehlerhafter Eingabe
				default: break;
 800095e:	bf00      	nop
			}

}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40020c00 	.word	0x40020c00
 800096c:	40020000 	.word	0x40020000

08000970 <LED_AlternateColour>:
/*----AlternateColourfunktion----
Toggled zwischen den angegebenen Farben bei einem Blinker bei jedem Aufruf
Überprüft ob die beiden angegbenenen Farben den gleichen Status haben, wenn ja wird erstmal colour1 getoggled
sonst wird die Farbe bei dem jeweiligen Aufruf aus oder angeschalten
*/
void LED_AlternateColour(uint8_t colour1, uint8_t colour2, uint8_t Blinker){
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
 800097a:	460b      	mov	r3, r1
 800097c:	71bb      	strb	r3, [r7, #6]
 800097e:	4613      	mov	r3, r2
 8000980:	717b      	strb	r3, [r7, #5]


	if (Colour_Status(colour1, Blinker) == Colour_Status(colour2, Blinker)){
 8000982:	797a      	ldrb	r2, [r7, #5]
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f849 	bl	8000a20 <Colour_Status>
 800098e:	4603      	mov	r3, r0
 8000990:	461c      	mov	r4, r3
 8000992:	797a      	ldrb	r2, [r7, #5]
 8000994:	79bb      	ldrb	r3, [r7, #6]
 8000996:	4611      	mov	r1, r2
 8000998:	4618      	mov	r0, r3
 800099a:	f000 f841 	bl	8000a20 <Colour_Status>
 800099e:	4603      	mov	r3, r0
 80009a0:	429c      	cmp	r4, r3
 80009a2:	d106      	bne.n	80009b2 <LED_AlternateColour+0x42>
		LED_Toggle(colour1, Blinker);
 80009a4:	797a      	ldrb	r2, [r7, #5]
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff08 	bl	80007c0 <LED_Toggle>
			LED_Toggle(colour1, Blinker);
		}
	}


}
 80009b0:	e032      	b.n	8000a18 <LED_AlternateColour+0xa8>
	else if (Colour_Status(colour1, Blinker) != Colour_Status(colour2, Blinker)){
 80009b2:	797a      	ldrb	r2, [r7, #5]
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 f831 	bl	8000a20 <Colour_Status>
 80009be:	4603      	mov	r3, r0
 80009c0:	461c      	mov	r4, r3
 80009c2:	797a      	ldrb	r2, [r7, #5]
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 f829 	bl	8000a20 <Colour_Status>
 80009ce:	4603      	mov	r3, r0
 80009d0:	429c      	cmp	r4, r3
 80009d2:	d021      	beq.n	8000a18 <LED_AlternateColour+0xa8>
		if(Colour_Status(colour1, Blinker))
 80009d4:	797a      	ldrb	r2, [r7, #5]
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4611      	mov	r1, r2
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f820 	bl	8000a20 <Colour_Status>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d00c      	beq.n	8000a00 <LED_AlternateColour+0x90>
			LED_Toggle(colour1, Blinker);
 80009e6:	797a      	ldrb	r2, [r7, #5]
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fee7 	bl	80007c0 <LED_Toggle>
			LED_Toggle(colour2, Blinker);
 80009f2:	797a      	ldrb	r2, [r7, #5]
 80009f4:	79bb      	ldrb	r3, [r7, #6]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fee1 	bl	80007c0 <LED_Toggle>
}
 80009fe:	e00b      	b.n	8000a18 <LED_AlternateColour+0xa8>
			LED_Toggle(colour2, Blinker);
 8000a00:	797a      	ldrb	r2, [r7, #5]
 8000a02:	79bb      	ldrb	r3, [r7, #6]
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff feda 	bl	80007c0 <LED_Toggle>
			LED_Toggle(colour1, Blinker);
 8000a0c:	797a      	ldrb	r2, [r7, #5]
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4611      	mov	r1, r2
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fed4 	bl	80007c0 <LED_Toggle>
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd90      	pop	{r4, r7, pc}

08000a20 <Colour_Status>:

/*---Statusfunktion für BLinker-----
gibt 1 zurück wenn nur die Farbe an dem angegebenen Blinker leuchtet
sonst 0
*/
uint8_t Colour_Status(uint8_t colour, uint8_t Blinker){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	460a      	mov	r2, r1
 8000a2a:	71fb      	strb	r3, [r7, #7]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	71bb      	strb	r3, [r7, #6]

	GPIO_TypeDef* gpio_port = NULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]

	//Blinkerportauswählen
	if (Blinker == BLINKERLINKS){
 8000a34:	79bb      	ldrb	r3, [r7, #6]
 8000a36:	2b2b      	cmp	r3, #43	; 0x2b
 8000a38:	d102      	bne.n	8000a40 <Colour_Status+0x20>
			gpio_port = LED_PORT_LINKS;
 8000a3a:	4b56      	ldr	r3, [pc, #344]	; (8000b94 <Colour_Status+0x174>)
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	e001      	b.n	8000a44 <Colour_Status+0x24>
		}
	else gpio_port = LED_PORT_RECHTS;
 8000a40:	4b55      	ldr	r3, [pc, #340]	; (8000b98 <Colour_Status+0x178>)
 8000a42:	60fb      	str	r3, [r7, #12]


	switch (colour)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	f200 809e 	bhi.w	8000b8a <Colour_Status+0x16a>
 8000a4e:	a201      	add	r2, pc, #4	; (adr r2, 8000a54 <Colour_Status+0x34>)
 8000a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a54:	08000a69 	.word	0x08000a69
 8000a58:	08000aa3 	.word	0x08000aa3
 8000a5c:	08000add 	.word	0x08000add
 8000a60:	08000b17 	.word	0x08000b17
 8000a64:	08000b51 	.word	0x08000b51
			{
				case RED:
					return HAL_GPIO_ReadPin(gpio_port, RED_LED_PIN) && !HAL_GPIO_ReadPin(gpio_port, GREEN_LED_PIN) && !HAL_GPIO_ReadPin(gpio_port, BLUE_LED_PIN);
 8000a68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f001 f863 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d011      	beq.n	8000a9c <Colour_Status+0x7c>
 8000a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f001 f85b 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d109      	bne.n	8000a9c <Colour_Status+0x7c>
 8000a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8c:	68f8      	ldr	r0, [r7, #12]
 8000a8e:	f001 f853 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d101      	bne.n	8000a9c <Colour_Status+0x7c>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e000      	b.n	8000a9e <Colour_Status+0x7e>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	e074      	b.n	8000b8c <Colour_Status+0x16c>
					break;

				case GREEN:
					return HAL_GPIO_ReadPin(gpio_port, GREEN_LED_PIN) && !HAL_GPIO_ReadPin(gpio_port, RED_LED_PIN) && !HAL_GPIO_ReadPin(gpio_port, BLUE_LED_PIN);
 8000aa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f001 f846 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d011      	beq.n	8000ad6 <Colour_Status+0xb6>
 8000ab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f001 f83e 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d109      	bne.n	8000ad6 <Colour_Status+0xb6>
 8000ac2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f001 f836 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <Colour_Status+0xb6>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e000      	b.n	8000ad8 <Colour_Status+0xb8>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	e057      	b.n	8000b8c <Colour_Status+0x16c>
					break;

				case BLUE:
					return HAL_GPIO_ReadPin(gpio_port, BLUE_LED_PIN) && !HAL_GPIO_ReadPin(gpio_port, GREEN_LED_PIN) && !HAL_GPIO_ReadPin(gpio_port, RED_LED_PIN);
 8000adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f001 f829 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d011      	beq.n	8000b10 <Colour_Status+0xf0>
 8000aec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f001 f821 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d109      	bne.n	8000b10 <Colour_Status+0xf0>
 8000afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f001 f819 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d101      	bne.n	8000b10 <Colour_Status+0xf0>
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e000      	b.n	8000b12 <Colour_Status+0xf2>
 8000b10:	2300      	movs	r3, #0
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	e03a      	b.n	8000b8c <Colour_Status+0x16c>
					break;

				case ORANGE:
					return HAL_GPIO_ReadPin(gpio_port, RED_LED_PIN) && HAL_GPIO_ReadPin(gpio_port, GREEN_LED_PIN) && !HAL_GPIO_ReadPin(gpio_port, BLUE_LED_PIN);
 8000b16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f001 f80c 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d011      	beq.n	8000b4a <Colour_Status+0x12a>
 8000b26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2a:	68f8      	ldr	r0, [r7, #12]
 8000b2c:	f001 f804 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d009      	beq.n	8000b4a <Colour_Status+0x12a>
 8000b36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3a:	68f8      	ldr	r0, [r7, #12]
 8000b3c:	f000 fffc 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <Colour_Status+0x12a>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <Colour_Status+0x12c>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	e01d      	b.n	8000b8c <Colour_Status+0x16c>
					break;

				case WHITE:
					return HAL_GPIO_ReadPin(gpio_port, RED_LED_PIN) && HAL_GPIO_ReadPin(gpio_port, GREEN_LED_PIN) && HAL_GPIO_ReadPin(gpio_port, BLUE_LED_PIN);
 8000b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b54:	68f8      	ldr	r0, [r7, #12]
 8000b56:	f000 ffef 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d011      	beq.n	8000b84 <Colour_Status+0x164>
 8000b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f000 ffe7 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d009      	beq.n	8000b84 <Colour_Status+0x164>
 8000b70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f000 ffdf 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <Colour_Status+0x164>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e000      	b.n	8000b86 <Colour_Status+0x166>
 8000b84:	2300      	movs	r3, #0
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	e000      	b.n	8000b8c <Colour_Status+0x16c>
					break;

				//bei Fehlerhaften Parametern wird 31 zurückgegeben
				default:
					return 31;
 8000b8a:	231f      	movs	r3, #31
					break;
			}
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40020c00 	.word	0x40020c00
 8000b98:	40020000 	.word	0x40020000

08000b9c <LED_BothOn>:
/*----Einschaltfunktion beider Blinker----
Schaltet beide Blinker auf die gewünschte Farbe
Nutzt LED_On und ist deshlab ebenfalls absolut!
*/

void LED_BothOn(uint8_t colour){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]

	switch (colour)
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	d839      	bhi.n	8000c22 <LED_BothOn+0x86>
 8000bae:	a201      	add	r2, pc, #4	; (adr r2, 8000bb4 <LED_BothOn+0x18>)
 8000bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb4:	08000bc9 	.word	0x08000bc9
 8000bb8:	08000bdb 	.word	0x08000bdb
 8000bbc:	08000bed 	.word	0x08000bed
 8000bc0:	08000bff 	.word	0x08000bff
 8000bc4:	08000c11 	.word	0x08000c11
	{
		case RED:
			LED_On(RED, BLINKERRECHTS);
 8000bc8:	212a      	movs	r1, #42	; 0x2a
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff fd0a 	bl	80005e4 <LED_On>
			LED_On(RED, BLINKERLINKS);
 8000bd0:	212b      	movs	r1, #43	; 0x2b
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff fd06 	bl	80005e4 <LED_On>
			break;
 8000bd8:	e024      	b.n	8000c24 <LED_BothOn+0x88>

		case GREEN:
			LED_On(GREEN, BLINKERRECHTS);
 8000bda:	212a      	movs	r1, #42	; 0x2a
 8000bdc:	2002      	movs	r0, #2
 8000bde:	f7ff fd01 	bl	80005e4 <LED_On>
			LED_On(GREEN, BLINKERLINKS);
 8000be2:	212b      	movs	r1, #43	; 0x2b
 8000be4:	2002      	movs	r0, #2
 8000be6:	f7ff fcfd 	bl	80005e4 <LED_On>
			break;
 8000bea:	e01b      	b.n	8000c24 <LED_BothOn+0x88>

		case BLUE:
			LED_On(BLUE, BLINKERRECHTS);
 8000bec:	212a      	movs	r1, #42	; 0x2a
 8000bee:	2003      	movs	r0, #3
 8000bf0:	f7ff fcf8 	bl	80005e4 <LED_On>
			LED_On(BLUE, BLINKERLINKS);
 8000bf4:	212b      	movs	r1, #43	; 0x2b
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	f7ff fcf4 	bl	80005e4 <LED_On>
			break;
 8000bfc:	e012      	b.n	8000c24 <LED_BothOn+0x88>

		case ORANGE:
			LED_On(ORANGE, BLINKERRECHTS);
 8000bfe:	212a      	movs	r1, #42	; 0x2a
 8000c00:	2004      	movs	r0, #4
 8000c02:	f7ff fcef 	bl	80005e4 <LED_On>
			LED_On(ORANGE, BLINKERLINKS);
 8000c06:	212b      	movs	r1, #43	; 0x2b
 8000c08:	2004      	movs	r0, #4
 8000c0a:	f7ff fceb 	bl	80005e4 <LED_On>
			break;
 8000c0e:	e009      	b.n	8000c24 <LED_BothOn+0x88>

		case WHITE:
			LED_On(WHITE, BLINKERRECHTS);
 8000c10:	212a      	movs	r1, #42	; 0x2a
 8000c12:	2005      	movs	r0, #5
 8000c14:	f7ff fce6 	bl	80005e4 <LED_On>
			LED_On(WHITE, BLINKERLINKS);
 8000c18:	212b      	movs	r1, #43	; 0x2b
 8000c1a:	2005      	movs	r0, #5
 8000c1c:	f7ff fce2 	bl	80005e4 <LED_On>
			break;
 8000c20:	e000      	b.n	8000c24 <LED_BothOn+0x88>

		//bei Fehlerhaften Parametern passiert nichts
		default: break;
 8000c22:	bf00      	nop
	}
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db0b      	blt.n	8000c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f003 021f 	and.w	r2, r3, #31
 8000c44:	4907      	ldr	r1, [pc, #28]	; (8000c64 <__NVIC_EnableIRQ+0x38>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db12      	blt.n	8000ca0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 021f 	and.w	r2, r3, #31
 8000c80:	490a      	ldr	r1, [pc, #40]	; (8000cac <__NVIC_DisableIRQ+0x44>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	2001      	movs	r0, #1
 8000c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8e:	3320      	adds	r3, #32
 8000c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c94:	f3bf 8f4f 	dsb	sy
}
 8000c98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c9a:	f3bf 8f6f 	isb	sy
}
 8000c9e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <drv_timer4_init>:
//--Pointer--
static void (*timerpointer)();							/* Zeiger für Callbackfunktion */

//--FUNKTIONEN--

void drv_timer4_init(void){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	RCC->APB1ENR|= RCC_APB1ENR_TIM4EN_Msk;				/* Takt für Tim4 aktivieren */
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <drv_timer4_init+0x50>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a11      	ldr	r2, [pc, #68]	; (8000d54 <drv_timer4_init+0x50>)
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
 8000d12:	6413      	str	r3, [r2, #64]	; 0x40
	TIM4->CR1 |= TIM_CR1_DIR_Msk;						/* Timer aufwärtszählen */
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <drv_timer4_init+0x54>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <drv_timer4_init+0x54>)
 8000d1a:	f043 0310 	orr.w	r3, r3, #16
 8000d1e:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |= TIM_CR1_ARPE_Msk;						/* Auto-Reload aktivieren */
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <drv_timer4_init+0x54>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0c      	ldr	r2, [pc, #48]	; (8000d58 <drv_timer4_init+0x54>)
 8000d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2a:	6013      	str	r3, [r2, #0]
	TIM4->PSC = 1000;									/* Vorteiler einstellen für 50ms */
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <drv_timer4_init+0x54>)
 8000d2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 800;									/* Auto-Reload Wert setzen */
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <drv_timer4_init+0x54>)
 8000d36:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000d3a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->DIER |= TIM_DIER_UIE_Msk;						/* Interrupt mit UIF-Flag aktivieren */
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <drv_timer4_init+0x54>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <drv_timer4_init+0x54>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(TIM4_IRQn,1);
 8000d48:	2101      	movs	r1, #1
 8000d4a:	201e      	movs	r0, #30
 8000d4c:	f7ff ffb0 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40000800 	.word	0x40000800

08000d5c <drv_timer4_CB_init>:


void drv_timer4_CB_init(void(*callback)()){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	timerpointer = callback;							/* Zeiger auf gegebene Funktion setzen */
 8000d64:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <drv_timer4_CB_init+0x28>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |= TIM_CR1_CEN_Msk;						/* Timer TIM4 aktivieren - erst hier aktivieren, sonst wird der Interrupt aufgerufen bevor der Callback definiert ist */
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <drv_timer4_CB_init+0x2c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <drv_timer4_CB_init+0x2c>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ (TIM4_IRQn);							/* Timer Interrupt aktivieren */
 8000d76:	201e      	movs	r0, #30
 8000d78:	f7ff ff58 	bl	8000c2c <__NVIC_EnableIRQ>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000028 	.word	0x20000028
 8000d88:	40000800 	.word	0x40000800

08000d8c <TIM4_IRQHandler>:


void TIM4_IRQHandler(){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
		NVIC_DisableIRQ(TIM4_IRQn);						/* Interrupt deaktivieren */
 8000d90:	201e      	movs	r0, #30
 8000d92:	f7ff ff69 	bl	8000c68 <__NVIC_DisableIRQ>
		(*timerpointer)();								/* Callback-Funktion ausführen */
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <TIM4_IRQHandler+0x28>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4798      	blx	r3
		TIM4->SR &= ~(TIM_SR_UIF_Msk);					/* UIF-Bit zurücksetzen */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <TIM4_IRQHandler+0x2c>)
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <TIM4_IRQHandler+0x2c>)
 8000da2:	f023 0301 	bic.w	r3, r3, #1
 8000da6:	6113      	str	r3, [r2, #16]
		NVIC_EnableIRQ(TIM4_IRQn);						/* Interrupt wieder aktivieren */
 8000da8:	201e      	movs	r0, #30
 8000daa:	f7ff ff3f 	bl	8000c2c <__NVIC_EnableIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000028 	.word	0x20000028
 8000db8:	40000800 	.word	0x40000800

08000dbc <Send_cmd>:
   cmd: Befehl, der gesendet werden soll
   Parameter1: Erster Parameter des Befehls
   Parameter2: Zweiter Parameter des Befehls
  */
void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	71bb      	strb	r3, [r7, #6]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	717b      	strb	r3, [r7, #5]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	79bb      	ldrb	r3, [r7, #6]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	4413      	add	r3, r2
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	797b      	ldrb	r3, [r7, #5]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	4413      	add	r3, r2
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	f203 1305 	addw	r3, r3, #261	; 0x105
 8000de6:	82fb      	strh	r3, [r7, #22]
	Checksum = 0-Checksum;
 8000de8:	8afb      	ldrh	r3, [r7, #22]
 8000dea:	425b      	negs	r3, r3
 8000dec:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 8000dee:	237e      	movs	r3, #126	; 0x7e
 8000df0:	733b      	strb	r3, [r7, #12]
 8000df2:	23ff      	movs	r3, #255	; 0xff
 8000df4:	737b      	strb	r3, [r7, #13]
 8000df6:	2306      	movs	r3, #6
 8000df8:	73bb      	strb	r3, [r7, #14]
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	73fb      	strb	r3, [r7, #15]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	743b      	strb	r3, [r7, #16]
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	747b      	strb	r3, [r7, #17]
 8000e06:	797b      	ldrb	r3, [r7, #5]
 8000e08:	74bb      	strb	r3, [r7, #18]
 8000e0a:	8afb      	ldrh	r3, [r7, #22]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	74fb      	strb	r3, [r7, #19]
 8000e14:	8afb      	ldrh	r3, [r7, #22]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	753b      	strb	r3, [r7, #20]
 8000e1a:	23ef      	movs	r3, #239	; 0xef
 8000e1c:	757b      	strb	r3, [r7, #21]
	HAL_UART_Transmit(DF_UART, CmdSequence, 10, 100);
 8000e1e:	f107 010c 	add.w	r1, r7, #12
 8000e22:	2364      	movs	r3, #100	; 0x64
 8000e24:	220a      	movs	r2, #10
 8000e26:	4803      	ldr	r0, [pc, #12]	; (8000e34 <Send_cmd+0x78>)
 8000e28:	f001 fbb7 	bl	800259a <HAL_UART_Transmit>
}
 8000e2c:	bf00      	nop
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000002c 	.word	0x2000002c

08000e38 <DF_Init>:

/*Initialisiert das DF-Modul*/
void DF_Init ()
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	Send_cmd(0x3F, 0x00, Quelle); // Befehl, um die Quelle auf die TF-Karte zu setzen
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	2100      	movs	r1, #0
 8000e40:	203f      	movs	r0, #63	; 0x3f
 8000e42:	f7ff ffbb 	bl	8000dbc <Send_cmd>
	HAL_Delay(500);
 8000e46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e4a:	f000 fbcf 	bl	80015ec <HAL_Delay>
	Send_cmd(0x06, 0x00, 0x1E); // Befehl, um die Lautstärke einzustellen
 8000e4e:	221e      	movs	r2, #30
 8000e50:	2100      	movs	r1, #0
 8000e52:	2006      	movs	r0, #6
 8000e54:	f7ff ffb2 	bl	8000dbc <Send_cmd>
	HAL_Delay(500);
 8000e58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e5c:	f000 fbc6 	bl	80015ec <HAL_Delay>
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e68:	f000 fb4e 	bl	8001508 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000e6c:	f000 f98c 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e70:	f000 fa12 	bl	8001298 <MX_GPIO_Init>
  MX_UART4_Init();
 8000e74:	f000 f9e6 	bl	8001244 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  DF_Init();	//Init DF-Player
 8000e78:	f7ff ffde 	bl	8000e38 <DF_Init>
  LED_Init();	//Init LEDs
 8000e7c:	f7ff fb26 	bl	80004cc <LED_Init>
  drv_timer4_init();	//Init Timer
 8000e80:	f7ff ff40 	bl	8000d04 <drv_timer4_init>
  drv_timer4_CB_init(callback);	//Init callback for Timer
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <main+0x3c>)
 8000e86:	f7ff ff69 	bl	8000d5c <drv_timer4_CB_init>


  previous_pin_state = GPIO_PIN_RESET;
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <main+0x40>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
  t = 0;
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <main+0x44>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
  z = 0;
 8000e96:	4b05      	ldr	r3, [pc, #20]	; (8000eac <main+0x48>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <main+0x38>
 8000e9e:	bf00      	nop
 8000ea0:	08001115 	.word	0x08001115
 8000ea4:	20000071 	.word	0x20000071
 8000ea8:	20000072 	.word	0x20000072
 8000eac:	20000073 	.word	0x20000073

08000eb0 <processInputs>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void processInputs(GPIO_PinState left_indicator, GPIO_PinState right_indicator, GPIO_PinState driving) {
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	71bb      	strb	r3, [r7, #6]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	717b      	strb	r3, [r7, #5]

    int combinedState = (left_indicator << 2) | right_indicator <<1 | driving;
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	009a      	lsls	r2, r3, #2
 8000ec6:	79bb      	ldrb	r3, [r7, #6]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	797b      	ldrb	r3, [r7, #5]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]

    switch(combinedState) {
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b07      	cmp	r3, #7
 8000ed6:	f200 8114 	bhi.w	8001102 <processInputs+0x252>
 8000eda:	a201      	add	r2, pc, #4	; (adr r2, 8000ee0 <processInputs+0x30>)
 8000edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee0:	08000f01 	.word	0x08000f01
 8000ee4:	08000f15 	.word	0x08000f15
 8000ee8:	08000f29 	.word	0x08000f29
 8000eec:	08000f6b 	.word	0x08000f6b
 8000ef0:	08000faf 	.word	0x08000faf
 8000ef4:	08000ff1 	.word	0x08000ff1
 8000ef8:	08001035 	.word	0x08001035
 8000efc:	08001099 	.word	0x08001099
        case 0b000:
        	//Fall: Blinker links aus, Blinker rechts aus, Fahren aus
        	LED_BothOn(RED);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f7ff fe4b 	bl	8000b9c <LED_BothOn>
        	t=0;
 8000f06:	4b81      	ldr	r3, [pc, #516]	; (800110c <processInputs+0x25c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
        	z = 0;
 8000f0c:	4b80      	ldr	r3, [pc, #512]	; (8001110 <processInputs+0x260>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
            break;
 8000f12:	e0f7      	b.n	8001104 <processInputs+0x254>
        case 0b001:
        	//Fall: Blinker links aus, Blinker rechts aus, Fahren an
            LED_BothOn(GREEN);
 8000f14:	2002      	movs	r0, #2
 8000f16:	f7ff fe41 	bl	8000b9c <LED_BothOn>
            t=0;
 8000f1a:	4b7c      	ldr	r3, [pc, #496]	; (800110c <processInputs+0x25c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
            z = 0;
 8000f20:	4b7b      	ldr	r3, [pc, #492]	; (8001110 <processInputs+0x260>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
            break;
 8000f26:	e0ed      	b.n	8001104 <processInputs+0x254>
        case 0b010:
            //Fall: Blinker links aus, Blinker rechts an, Fahren aus
        	if (t>=6 || z == 0)
 8000f28:	4b78      	ldr	r3, [pc, #480]	; (800110c <processInputs+0x25c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b05      	cmp	r3, #5
 8000f2e:	d803      	bhi.n	8000f38 <processInputs+0x88>
 8000f30:	4b77      	ldr	r3, [pc, #476]	; (8001110 <processInputs+0x260>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d10e      	bne.n	8000f56 <processInputs+0xa6>
        	{
        		LED_Off(WHITE, BLINKERLINKS);
 8000f38:	212b      	movs	r1, #43	; 0x2b
 8000f3a:	2005      	movs	r0, #5
 8000f3c:	f7ff fbde 	bl	80006fc <LED_Off>
        		LED_Toggle(ORANGE, BLINKERRECHTS);
 8000f40:	212a      	movs	r1, #42	; 0x2a
 8000f42:	2004      	movs	r0, #4
 8000f44:	f7ff fc3c 	bl	80007c0 <LED_Toggle>
        		t = 0;
 8000f48:	4b70      	ldr	r3, [pc, #448]	; (800110c <processInputs+0x25c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
        		z = 1;
 8000f4e:	4b70      	ldr	r3, [pc, #448]	; (8001110 <processInputs+0x260>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
        		break;
 8000f54:	e0d6      	b.n	8001104 <processInputs+0x254>
        	}
        	z = 1;
 8000f56:	4b6e      	ldr	r3, [pc, #440]	; (8001110 <processInputs+0x260>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
        	t++;
 8000f5c:	4b6b      	ldr	r3, [pc, #428]	; (800110c <processInputs+0x25c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	4b69      	ldr	r3, [pc, #420]	; (800110c <processInputs+0x25c>)
 8000f66:	701a      	strb	r2, [r3, #0]
            break;
 8000f68:	e0cc      	b.n	8001104 <processInputs+0x254>
        case 0b011:
            //Fall: Blinker links aus, Blinker rechts an, Fahren an
        	if (t>=6 || z == 0)
 8000f6a:	4b68      	ldr	r3, [pc, #416]	; (800110c <processInputs+0x25c>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b05      	cmp	r3, #5
 8000f70:	d803      	bhi.n	8000f7a <processInputs+0xca>
 8000f72:	4b67      	ldr	r3, [pc, #412]	; (8001110 <processInputs+0x260>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10f      	bne.n	8000f9a <processInputs+0xea>
        	{
        		LED_On(GREEN, BLINKERLINKS);
 8000f7a:	212b      	movs	r1, #43	; 0x2b
 8000f7c:	2002      	movs	r0, #2
 8000f7e:	f7ff fb31 	bl	80005e4 <LED_On>
        		LED_AlternateColour(ORANGE, GREEN, BLINKERRECHTS);
 8000f82:	222a      	movs	r2, #42	; 0x2a
 8000f84:	2102      	movs	r1, #2
 8000f86:	2004      	movs	r0, #4
 8000f88:	f7ff fcf2 	bl	8000970 <LED_AlternateColour>
        		t = 0;
 8000f8c:	4b5f      	ldr	r3, [pc, #380]	; (800110c <processInputs+0x25c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
        		z = 1;
 8000f92:	4b5f      	ldr	r3, [pc, #380]	; (8001110 <processInputs+0x260>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	701a      	strb	r2, [r3, #0]
        		break;
 8000f98:	e0b4      	b.n	8001104 <processInputs+0x254>
        	}
        	z = 1;
 8000f9a:	4b5d      	ldr	r3, [pc, #372]	; (8001110 <processInputs+0x260>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
            t++;
 8000fa0:	4b5a      	ldr	r3, [pc, #360]	; (800110c <processInputs+0x25c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b58      	ldr	r3, [pc, #352]	; (800110c <processInputs+0x25c>)
 8000faa:	701a      	strb	r2, [r3, #0]
            break;
 8000fac:	e0aa      	b.n	8001104 <processInputs+0x254>
        case 0b100:
           //Fall: Blinker links an, Blinker rechts aus, Fahren aus
        	if (t>=6 || z == 0)
 8000fae:	4b57      	ldr	r3, [pc, #348]	; (800110c <processInputs+0x25c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b05      	cmp	r3, #5
 8000fb4:	d803      	bhi.n	8000fbe <processInputs+0x10e>
 8000fb6:	4b56      	ldr	r3, [pc, #344]	; (8001110 <processInputs+0x260>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10e      	bne.n	8000fdc <processInputs+0x12c>
        	{
        		LED_Off(WHITE, BLINKERRECHTS);
 8000fbe:	212a      	movs	r1, #42	; 0x2a
 8000fc0:	2005      	movs	r0, #5
 8000fc2:	f7ff fb9b 	bl	80006fc <LED_Off>
        		LED_Toggle(ORANGE, BLINKERLINKS);
 8000fc6:	212b      	movs	r1, #43	; 0x2b
 8000fc8:	2004      	movs	r0, #4
 8000fca:	f7ff fbf9 	bl	80007c0 <LED_Toggle>
        		t=0;
 8000fce:	4b4f      	ldr	r3, [pc, #316]	; (800110c <processInputs+0x25c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
        		z = 1;
 8000fd4:	4b4e      	ldr	r3, [pc, #312]	; (8001110 <processInputs+0x260>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
        		break;
 8000fda:	e093      	b.n	8001104 <processInputs+0x254>
        	}
        	z = 1;
 8000fdc:	4b4c      	ldr	r3, [pc, #304]	; (8001110 <processInputs+0x260>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
        	t++;
 8000fe2:	4b4a      	ldr	r3, [pc, #296]	; (800110c <processInputs+0x25c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b48      	ldr	r3, [pc, #288]	; (800110c <processInputs+0x25c>)
 8000fec:	701a      	strb	r2, [r3, #0]
            break;
 8000fee:	e089      	b.n	8001104 <processInputs+0x254>
        case 0b101:
            //Fall: Blinker links an, Blinker rechts aus, Fahren an
        	if (t>=6 || z == 0)
 8000ff0:	4b46      	ldr	r3, [pc, #280]	; (800110c <processInputs+0x25c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b05      	cmp	r3, #5
 8000ff6:	d803      	bhi.n	8001000 <processInputs+0x150>
 8000ff8:	4b45      	ldr	r3, [pc, #276]	; (8001110 <processInputs+0x260>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10f      	bne.n	8001020 <processInputs+0x170>
        	{
        		LED_On(GREEN, BLINKERRECHTS);
 8001000:	212a      	movs	r1, #42	; 0x2a
 8001002:	2002      	movs	r0, #2
 8001004:	f7ff faee 	bl	80005e4 <LED_On>
        		LED_AlternateColour(ORANGE, GREEN, BLINKERLINKS);
 8001008:	222b      	movs	r2, #43	; 0x2b
 800100a:	2102      	movs	r1, #2
 800100c:	2004      	movs	r0, #4
 800100e:	f7ff fcaf 	bl	8000970 <LED_AlternateColour>
        		t=0;
 8001012:	4b3e      	ldr	r3, [pc, #248]	; (800110c <processInputs+0x25c>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
        		z = 1;
 8001018:	4b3d      	ldr	r3, [pc, #244]	; (8001110 <processInputs+0x260>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
        		break;
 800101e:	e071      	b.n	8001104 <processInputs+0x254>
        	}
        	z = 1;
 8001020:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <processInputs+0x260>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
        	t++;
 8001026:	4b39      	ldr	r3, [pc, #228]	; (800110c <processInputs+0x25c>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	3301      	adds	r3, #1
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b37      	ldr	r3, [pc, #220]	; (800110c <processInputs+0x25c>)
 8001030:	701a      	strb	r2, [r3, #0]
            break;
 8001032:	e067      	b.n	8001104 <processInputs+0x254>
        case 0b110:
            //Fall: Blinker links an, Blinker rechts an, Fahren aus
        	if (t>=6 || z == 0)
 8001034:	4b35      	ldr	r3, [pc, #212]	; (800110c <processInputs+0x25c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b05      	cmp	r3, #5
 800103a:	d803      	bhi.n	8001044 <processInputs+0x194>
 800103c:	4b34      	ldr	r3, [pc, #208]	; (8001110 <processInputs+0x260>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d11f      	bne.n	8001084 <processInputs+0x1d4>
        	{
        		if (Colour_Status(ORANGE, BLINKERLINKS) != Colour_Status(ORANGE, BLINKERRECHTS))
 8001044:	212b      	movs	r1, #43	; 0x2b
 8001046:	2004      	movs	r0, #4
 8001048:	f7ff fcea 	bl	8000a20 <Colour_Status>
 800104c:	4603      	mov	r3, r0
 800104e:	461c      	mov	r4, r3
 8001050:	212a      	movs	r1, #42	; 0x2a
 8001052:	2004      	movs	r0, #4
 8001054:	f7ff fce4 	bl	8000a20 <Colour_Status>
 8001058:	4603      	mov	r3, r0
 800105a:	429c      	cmp	r4, r3
 800105c:	d003      	beq.n	8001066 <processInputs+0x1b6>
        		{
        			LED_Toggle(ORANGE, BLINKERLINKS);
 800105e:	212b      	movs	r1, #43	; 0x2b
 8001060:	2004      	movs	r0, #4
 8001062:	f7ff fbad 	bl	80007c0 <LED_Toggle>
        		}
        		LED_Toggle(ORANGE, BLINKERLINKS);
 8001066:	212b      	movs	r1, #43	; 0x2b
 8001068:	2004      	movs	r0, #4
 800106a:	f7ff fba9 	bl	80007c0 <LED_Toggle>
        		LED_Toggle(ORANGE, BLINKERRECHTS);
 800106e:	212a      	movs	r1, #42	; 0x2a
 8001070:	2004      	movs	r0, #4
 8001072:	f7ff fba5 	bl	80007c0 <LED_Toggle>
        		t=0;
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <processInputs+0x25c>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
        		z = 1;
 800107c:	4b24      	ldr	r3, [pc, #144]	; (8001110 <processInputs+0x260>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
        		break;
 8001082:	e03f      	b.n	8001104 <processInputs+0x254>
        	}
        	z = 1;
 8001084:	4b22      	ldr	r3, [pc, #136]	; (8001110 <processInputs+0x260>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
        	t++;
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <processInputs+0x25c>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b1e      	ldr	r3, [pc, #120]	; (800110c <processInputs+0x25c>)
 8001094:	701a      	strb	r2, [r3, #0]
            break;
 8001096:	e035      	b.n	8001104 <processInputs+0x254>
        case 0b111:
            //Fall: Blinker links an, Blinker rechts an, Fahren an
        	if (t>=6 || z == 0)
 8001098:	4b1c      	ldr	r3, [pc, #112]	; (800110c <processInputs+0x25c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b05      	cmp	r3, #5
 800109e:	d803      	bhi.n	80010a8 <processInputs+0x1f8>
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <processInputs+0x260>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d122      	bne.n	80010ee <processInputs+0x23e>
        	{
        		if(Colour_Status(ORANGE, BLINKERRECHTS) != Colour_Status(ORANGE, BLINKERLINKS))
 80010a8:	212a      	movs	r1, #42	; 0x2a
 80010aa:	2004      	movs	r0, #4
 80010ac:	f7ff fcb8 	bl	8000a20 <Colour_Status>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461c      	mov	r4, r3
 80010b4:	212b      	movs	r1, #43	; 0x2b
 80010b6:	2004      	movs	r0, #4
 80010b8:	f7ff fcb2 	bl	8000a20 <Colour_Status>
 80010bc:	4603      	mov	r3, r0
 80010be:	429c      	cmp	r4, r3
 80010c0:	d004      	beq.n	80010cc <processInputs+0x21c>
        		{
        			LED_AlternateColour(ORANGE, GREEN, BLINKERRECHTS);
 80010c2:	222a      	movs	r2, #42	; 0x2a
 80010c4:	2102      	movs	r1, #2
 80010c6:	2004      	movs	r0, #4
 80010c8:	f7ff fc52 	bl	8000970 <LED_AlternateColour>
        		}
        		LED_AlternateColour(ORANGE, GREEN, BLINKERRECHTS);
 80010cc:	222a      	movs	r2, #42	; 0x2a
 80010ce:	2102      	movs	r1, #2
 80010d0:	2004      	movs	r0, #4
 80010d2:	f7ff fc4d 	bl	8000970 <LED_AlternateColour>
        		LED_AlternateColour(ORANGE, GREEN, BLINKERLINKS);
 80010d6:	222b      	movs	r2, #43	; 0x2b
 80010d8:	2102      	movs	r1, #2
 80010da:	2004      	movs	r0, #4
 80010dc:	f7ff fc48 	bl	8000970 <LED_AlternateColour>
        		t=0;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <processInputs+0x25c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
        		z = 1;
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <processInputs+0x260>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
        		break;
 80010ec:	e00a      	b.n	8001104 <processInputs+0x254>
        	}
        	z = 1;
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <processInputs+0x260>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
        	t++;
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <processInputs+0x25c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <processInputs+0x25c>)
 80010fe:	701a      	strb	r2, [r3, #0]
            break;
 8001100:	e000      	b.n	8001104 <processInputs+0x254>
        default:
            // Standardfall oder Fehlerbehandlung
            break;
 8001102:	bf00      	nop
    }

}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	bd90      	pop	{r4, r7, pc}
 800110c:	20000072 	.word	0x20000072
 8001110:	20000073 	.word	0x20000073

08001114 <callback>:


void callback(void)
{
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	af00      	add	r7, sp, #0
	 horn_state = HAL_GPIO_ReadPin(PORT_DATA, HORN);
 8001118:	2104      	movs	r1, #4
 800111a:	4818      	ldr	r0, [pc, #96]	; (800117c <callback+0x68>)
 800111c:	f000 fd0c 	bl	8001b38 <HAL_GPIO_ReadPin>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <callback+0x6c>)
 8001126:	701a      	strb	r2, [r3, #0]

	 if(horn_state == GPIO_PIN_SET && previous_pin_state == GPIO_PIN_RESET)
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <callback+0x6c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d108      	bne.n	8001142 <callback+0x2e>
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <callback+0x70>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d104      	bne.n	8001142 <callback+0x2e>
	 {
		 Send_cmd(0x03, 0x00, 0x01);		//Hupen sound abspielen
 8001138:	2201      	movs	r2, #1
 800113a:	2100      	movs	r1, #0
 800113c:	2003      	movs	r0, #3
 800113e:	f7ff fe3d 	bl	8000dbc <Send_cmd>
	 }
	 previous_pin_state = horn_state;
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <callback+0x6c>)
 8001144:	781a      	ldrb	r2, [r3, #0]
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <callback+0x70>)
 8001148:	701a      	strb	r2, [r3, #0]

	 processInputs(HAL_GPIO_ReadPin(PORT_DATA, LEFT_INDICATOR), HAL_GPIO_ReadPin(PORT_DATA, RIGHT_INDICATOR), HAL_GPIO_ReadPin(PORT_DATA, DRIVING));
 800114a:	2108      	movs	r1, #8
 800114c:	480b      	ldr	r0, [pc, #44]	; (800117c <callback+0x68>)
 800114e:	f000 fcf3 	bl	8001b38 <HAL_GPIO_ReadPin>
 8001152:	4603      	mov	r3, r0
 8001154:	461c      	mov	r4, r3
 8001156:	2110      	movs	r1, #16
 8001158:	4808      	ldr	r0, [pc, #32]	; (800117c <callback+0x68>)
 800115a:	f000 fced 	bl	8001b38 <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	461d      	mov	r5, r3
 8001162:	2101      	movs	r1, #1
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <callback+0x68>)
 8001166:	f000 fce7 	bl	8001b38 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	4629      	mov	r1, r5
 8001170:	4620      	mov	r0, r4
 8001172:	f7ff fe9d 	bl	8000eb0 <processInputs>

}
 8001176:	bf00      	nop
 8001178:	bdb0      	pop	{r4, r5, r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	20000070 	.word	0x20000070
 8001184:	20000071 	.word	0x20000071

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	2230      	movs	r2, #48	; 0x30
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f001 ff88 	bl	80030ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <SystemClock_Config+0xb4>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a21      	ldr	r2, [pc, #132]	; (800123c <SystemClock_Config+0xb4>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <SystemClock_Config+0xb4>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <SystemClock_Config+0xb8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <SystemClock_Config+0xb8>)
 80011d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <SystemClock_Config+0xb8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e4:	2302      	movs	r3, #2
 80011e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ec:	2310      	movs	r3, #16
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f4:	f107 0320 	add.w	r3, r7, #32
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fce9 	bl	8001bd0 <HAL_RCC_OscConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001204:	f000 f8a6 	bl	8001354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001208:	230f      	movs	r3, #15
 800120a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f000 ff4c 	bl	80020c0 <HAL_RCC_ClockConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800122e:	f000 f891 	bl	8001354 <Error_Handler>
  }
}
 8001232:	bf00      	nop
 8001234:	3750      	adds	r7, #80	; 0x50
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40007000 	.word	0x40007000

08001244 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_UART4_Init+0x4c>)
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <MX_UART4_Init+0x50>)
 800124c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_UART4_Init+0x4c>)
 8001250:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001254:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_UART4_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_UART4_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_UART4_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_UART4_Init+0x4c>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_UART4_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_UART4_Init+0x4c>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_UART4_Init+0x4c>)
 800127c:	f001 f940 	bl	8002500 <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001286:	f000 f865 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000002c 	.word	0x2000002c
 8001294:	40004c00 	.word	0x40004c00

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <MX_GPIO_Init+0xb0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a28      	ldr	r2, [pc, #160]	; (8001348 <MX_GPIO_Init+0xb0>)
 80012a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <MX_GPIO_Init+0xb0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b22      	ldr	r3, [pc, #136]	; (8001348 <MX_GPIO_Init+0xb0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a21      	ldr	r2, [pc, #132]	; (8001348 <MX_GPIO_Init+0xb0>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <MX_GPIO_Init+0xb0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <MX_GPIO_Init+0xb0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a1a      	ldr	r2, [pc, #104]	; (8001348 <MX_GPIO_Init+0xb0>)
 80012e0:	f043 0310 	orr.w	r3, r3, #16
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <MX_GPIO_Init+0xb0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0310 	and.w	r3, r3, #16
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001302:	2303      	movs	r3, #3
 8001304:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130a:	2301      	movs	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001312:	2308      	movs	r3, #8
 8001314:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4619      	mov	r1, r3
 800131c:	480b      	ldr	r0, [pc, #44]	; (800134c <MX_GPIO_Init+0xb4>)
 800131e:	f000 fa6f 	bl	8001800 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_0;
 8001322:	231d      	movs	r3, #29
 8001324:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800132a:	2302      	movs	r3, #2
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_GPIO_Init+0xb8>)
 800133a:	f000 fa61 	bl	8001800 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 800133e:	bf00      	nop
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40020000 	.word	0x40020000
 8001350:	40021000 	.word	0x40021000

08001354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001358:	b672      	cpsid	i
}
 800135a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800135c:	e7fe      	b.n	800135c <Error_Handler+0x8>
	...

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_MspInit+0x54>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <HAL_MspInit+0x54>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001374:	6453      	str	r3, [r2, #68]	; 0x44
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_MspInit+0x54>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_MspInit+0x54>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <HAL_MspInit+0x54>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_MspInit+0x54>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	210f      	movs	r1, #15
 80013a2:	f06f 0001 	mvn.w	r0, #1
 80013a6:	f000 fa02 	bl	80017ae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800

080013b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a19      	ldr	r2, [pc, #100]	; (800143c <HAL_UART_MspInit+0x84>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d12b      	bne.n	8001432 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_UART_MspInit+0x88>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <HAL_UART_MspInit+0x88>)
 80013e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_UART_MspInit+0x88>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <HAL_UART_MspInit+0x88>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a10      	ldr	r2, [pc, #64]	; (8001440 <HAL_UART_MspInit+0x88>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_UART_MspInit+0x88>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001412:	2303      	movs	r3, #3
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001422:	2308      	movs	r3, #8
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <HAL_UART_MspInit+0x8c>)
 800142e:	f000 f9e7 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	; 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40004c00 	.word	0x40004c00
 8001440:	40023800 	.word	0x40023800
 8001444:	40020000 	.word	0x40020000

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800144c:	e7fe      	b.n	800144c <NMI_Handler+0x4>

0800144e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <MemManage_Handler+0x4>

0800145a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <UsageFault_Handler+0x4>

08001466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001478:	f000 f898 	bl	80015ac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800147c:	f001 fd84 	bl	8002f88 <xTaskGetSchedulerState>
 8001480:	4603      	mov	r3, r0
 8001482:	2b01      	cmp	r3, #1
 8001484:	d001      	beq.n	800148a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001486:	f001 fdef 	bl	8003068 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <SystemInit+0x20>)
 8001496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <SystemInit+0x20>)
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b8:	480d      	ldr	r0, [pc, #52]	; (80014f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ba:	490e      	ldr	r1, [pc, #56]	; (80014f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014bc:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c0:	e002      	b.n	80014c8 <LoopCopyDataInit>

080014c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c6:	3304      	adds	r3, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014cc:	d3f9      	bcc.n	80014c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014d0:	4c0b      	ldr	r4, [pc, #44]	; (8001500 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d4:	e001      	b.n	80014da <LoopFillZerobss>

080014d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d8:	3204      	adds	r2, #4

080014da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014dc:	d3fb      	bcc.n	80014d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014de:	f7ff ffd7 	bl	8001490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014e2:	f001 fdeb 	bl	80030bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e6:	f7ff fcbd 	bl	8000e64 <main>
  bx  lr    
 80014ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014f8:	08003144 	.word	0x08003144
  ldr r2, =_sbss
 80014fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001500:	20000130 	.word	0x20000130

08001504 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC_IRQHandler>
	...

08001508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <HAL_Init+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <HAL_Init+0x40>)
 8001512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001516:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_Init+0x40>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_Init+0x40>)
 800151e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001522:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_Init+0x40>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_Init+0x40>)
 800152a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f000 f931 	bl	8001798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001536:	200f      	movs	r0, #15
 8001538:	f000 f808 	bl	800154c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800153c:	f7ff ff10 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023c00 	.word	0x40023c00

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x54>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_InitTick+0x58>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	fbb3 f3f1 	udiv	r3, r3, r1
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f93b 	bl	80017e6 <HAL_SYSTICK_Config>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e00e      	b.n	8001598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d80a      	bhi.n	8001596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001588:	f000 f911 	bl	80017ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <HAL_InitTick+0x5c>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000000 	.word	0x20000000
 80015a4:	20000008 	.word	0x20000008
 80015a8:	20000004 	.word	0x20000004

080015ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_IncTick+0x24>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000008 	.word	0x20000008
 80015d0:	20000074 	.word	0x20000074

080015d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000074 	.word	0x20000074

080015ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff ffee 	bl	80015d4 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001604:	d005      	beq.n	8001612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_Delay+0x44>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001612:	bf00      	nop
 8001614:	f7ff ffde 	bl	80015d4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	429a      	cmp	r2, r3
 8001622:	d8f7      	bhi.n	8001614 <HAL_Delay+0x28>
  {
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000008 	.word	0x20000008

08001634 <__NVIC_SetPriorityGrouping>:
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_SetPriority>:
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db0a      	blt.n	80016c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	490c      	ldr	r1, [pc, #48]	; (80016e4 <__NVIC_SetPriority+0x4c>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	0112      	lsls	r2, r2, #4
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	440b      	add	r3, r1
 80016bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016c0:	e00a      	b.n	80016d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4908      	ldr	r1, [pc, #32]	; (80016e8 <__NVIC_SetPriority+0x50>)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	3b04      	subs	r3, #4
 80016d0:	0112      	lsls	r2, r2, #4
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	440b      	add	r3, r1
 80016d6:	761a      	strb	r2, [r3, #24]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f1c3 0307 	rsb	r3, r3, #7
 8001706:	2b04      	cmp	r3, #4
 8001708:	bf28      	it	cs
 800170a:	2304      	movcs	r3, #4
 800170c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3304      	adds	r3, #4
 8001712:	2b06      	cmp	r3, #6
 8001714:	d902      	bls.n	800171c <NVIC_EncodePriority+0x30>
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3b03      	subs	r3, #3
 800171a:	e000      	b.n	800171e <NVIC_EncodePriority+0x32>
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43da      	mvns	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	401a      	ands	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	43d9      	mvns	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	4313      	orrs	r3, r2
         );
}
 8001746:	4618      	mov	r0, r3
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001764:	d301      	bcc.n	800176a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001766:	2301      	movs	r3, #1
 8001768:	e00f      	b.n	800178a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <SysTick_Config+0x40>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001772:	210f      	movs	r1, #15
 8001774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001778:	f7ff ff8e 	bl	8001698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <SysTick_Config+0x40>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SysTick_Config+0x40>)
 8001784:	2207      	movs	r2, #7
 8001786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	e000e010 	.word	0xe000e010

08001798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff47 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c0:	f7ff ff5c 	bl	800167c <__NVIC_GetPriorityGrouping>
 80017c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	6978      	ldr	r0, [r7, #20]
 80017cc:	f7ff ff8e 	bl	80016ec <NVIC_EncodePriority>
 80017d0:	4602      	mov	r2, r0
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff5d 	bl	8001698 <__NVIC_SetPriority>
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffb0 	bl	8001754 <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	e16b      	b.n	8001af4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800181c:	2201      	movs	r2, #1
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	429a      	cmp	r2, r3
 8001836:	f040 815a 	bne.w	8001aee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b01      	cmp	r3, #1
 8001844:	d005      	beq.n	8001852 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800184e:	2b02      	cmp	r3, #2
 8001850:	d130      	bne.n	80018b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001888:	2201      	movs	r2, #1
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 0201 	and.w	r2, r3, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d017      	beq.n	80018f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d123      	bne.n	8001944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	08da      	lsrs	r2, r3, #3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3208      	adds	r2, #8
 8001904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	691a      	ldr	r2, [r3, #16]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	08da      	lsrs	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3208      	adds	r2, #8
 800193e:	69b9      	ldr	r1, [r7, #24]
 8001940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0203 	and.w	r2, r3, #3
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80b4 	beq.w	8001aee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	4b60      	ldr	r3, [pc, #384]	; (8001b0c <HAL_GPIO_Init+0x30c>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a5f      	ldr	r2, [pc, #380]	; (8001b0c <HAL_GPIO_Init+0x30c>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b5d      	ldr	r3, [pc, #372]	; (8001b0c <HAL_GPIO_Init+0x30c>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a2:	4a5b      	ldr	r2, [pc, #364]	; (8001b10 <HAL_GPIO_Init+0x310>)
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	3302      	adds	r3, #2
 80019aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	220f      	movs	r2, #15
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a52      	ldr	r2, [pc, #328]	; (8001b14 <HAL_GPIO_Init+0x314>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d02b      	beq.n	8001a26 <HAL_GPIO_Init+0x226>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a51      	ldr	r2, [pc, #324]	; (8001b18 <HAL_GPIO_Init+0x318>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d025      	beq.n	8001a22 <HAL_GPIO_Init+0x222>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a50      	ldr	r2, [pc, #320]	; (8001b1c <HAL_GPIO_Init+0x31c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d01f      	beq.n	8001a1e <HAL_GPIO_Init+0x21e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4f      	ldr	r2, [pc, #316]	; (8001b20 <HAL_GPIO_Init+0x320>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d019      	beq.n	8001a1a <HAL_GPIO_Init+0x21a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4e      	ldr	r2, [pc, #312]	; (8001b24 <HAL_GPIO_Init+0x324>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d013      	beq.n	8001a16 <HAL_GPIO_Init+0x216>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4d      	ldr	r2, [pc, #308]	; (8001b28 <HAL_GPIO_Init+0x328>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d00d      	beq.n	8001a12 <HAL_GPIO_Init+0x212>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4c      	ldr	r2, [pc, #304]	; (8001b2c <HAL_GPIO_Init+0x32c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d007      	beq.n	8001a0e <HAL_GPIO_Init+0x20e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4b      	ldr	r2, [pc, #300]	; (8001b30 <HAL_GPIO_Init+0x330>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d101      	bne.n	8001a0a <HAL_GPIO_Init+0x20a>
 8001a06:	2307      	movs	r3, #7
 8001a08:	e00e      	b.n	8001a28 <HAL_GPIO_Init+0x228>
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	e00c      	b.n	8001a28 <HAL_GPIO_Init+0x228>
 8001a0e:	2306      	movs	r3, #6
 8001a10:	e00a      	b.n	8001a28 <HAL_GPIO_Init+0x228>
 8001a12:	2305      	movs	r3, #5
 8001a14:	e008      	b.n	8001a28 <HAL_GPIO_Init+0x228>
 8001a16:	2304      	movs	r3, #4
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x228>
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e004      	b.n	8001a28 <HAL_GPIO_Init+0x228>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e002      	b.n	8001a28 <HAL_GPIO_Init+0x228>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_GPIO_Init+0x228>
 8001a26:	2300      	movs	r3, #0
 8001a28:	69fa      	ldr	r2, [r7, #28]
 8001a2a:	f002 0203 	and.w	r2, r2, #3
 8001a2e:	0092      	lsls	r2, r2, #2
 8001a30:	4093      	lsls	r3, r2
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a38:	4935      	ldr	r1, [pc, #212]	; (8001b10 <HAL_GPIO_Init+0x310>)
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	089b      	lsrs	r3, r3, #2
 8001a3e:	3302      	adds	r3, #2
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a46:	4b3b      	ldr	r3, [pc, #236]	; (8001b34 <HAL_GPIO_Init+0x334>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a6a:	4a32      	ldr	r2, [pc, #200]	; (8001b34 <HAL_GPIO_Init+0x334>)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a70:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <HAL_GPIO_Init+0x334>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a94:	4a27      	ldr	r2, [pc, #156]	; (8001b34 <HAL_GPIO_Init+0x334>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_GPIO_Init+0x334>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001abe:	4a1d      	ldr	r2, [pc, #116]	; (8001b34 <HAL_GPIO_Init+0x334>)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <HAL_GPIO_Init+0x334>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae8:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <HAL_GPIO_Init+0x334>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3301      	adds	r3, #1
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	2b0f      	cmp	r3, #15
 8001af8:	f67f ae90 	bls.w	800181c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3724      	adds	r7, #36	; 0x24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40013800 	.word	0x40013800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40020400 	.word	0x40020400
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020c00 	.word	0x40020c00
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40021400 	.word	0x40021400
 8001b2c:	40021800 	.word	0x40021800
 8001b30:	40021c00 	.word	0x40021c00
 8001b34:	40013c00 	.word	0x40013c00

08001b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e001      	b.n	8001b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b84:	e003      	b.n	8001b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	041a      	lsls	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	619a      	str	r2, [r3, #24]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bac:	887a      	ldrh	r2, [r7, #2]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	041a      	lsls	r2, r3, #16
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	43d9      	mvns	r1, r3
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	400b      	ands	r3, r1
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]
}
 8001bc2:	bf00      	nop
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e267      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d075      	beq.n	8001cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bee:	4b88      	ldr	r3, [pc, #544]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d00c      	beq.n	8001c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfa:	4b85      	ldr	r3, [pc, #532]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d112      	bne.n	8001c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c06:	4b82      	ldr	r3, [pc, #520]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c12:	d10b      	bne.n	8001c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	4b7e      	ldr	r3, [pc, #504]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d05b      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x108>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d157      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e242      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d106      	bne.n	8001c44 <HAL_RCC_OscConfig+0x74>
 8001c36:	4b76      	ldr	r3, [pc, #472]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a75      	ldr	r2, [pc, #468]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e01d      	b.n	8001c80 <HAL_RCC_OscConfig+0xb0>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x98>
 8001c4e:	4b70      	ldr	r3, [pc, #448]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a6f      	ldr	r2, [pc, #444]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b6d      	ldr	r3, [pc, #436]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a6c      	ldr	r2, [pc, #432]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0xb0>
 8001c68:	4b69      	ldr	r3, [pc, #420]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a68      	ldr	r2, [pc, #416]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b66      	ldr	r3, [pc, #408]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a65      	ldr	r2, [pc, #404]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff fca4 	bl	80015d4 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c90:	f7ff fca0 	bl	80015d4 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	; 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e207      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b5b      	ldr	r3, [pc, #364]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0xc0>
 8001cae:	e014      	b.n	8001cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fc90 	bl	80015d4 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff fc8c 	bl	80015d4 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e1f3      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	4b51      	ldr	r3, [pc, #324]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0xe8>
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d063      	beq.n	8001dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00b      	beq.n	8001d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf2:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d11c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfe:	4b44      	ldr	r3, [pc, #272]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d116      	bne.n	8001d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0a:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d005      	beq.n	8001d22 <HAL_RCC_OscConfig+0x152>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d001      	beq.n	8001d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e1c7      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4937      	ldr	r1, [pc, #220]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d36:	e03a      	b.n	8001dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d020      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d40:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <HAL_RCC_OscConfig+0x244>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff fc45 	bl	80015d4 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7ff fc41 	bl	80015d4 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e1a8      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d60:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6c:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4925      	ldr	r1, [pc, #148]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	600b      	str	r3, [r1, #0]
 8001d80:	e015      	b.n	8001dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_RCC_OscConfig+0x244>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff fc24 	bl	80015d4 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d90:	f7ff fc20 	bl	80015d4 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e187      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d036      	beq.n	8001e28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d016      	beq.n	8001df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <HAL_RCC_OscConfig+0x248>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc8:	f7ff fc04 	bl	80015d4 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd0:	f7ff fc00 	bl	80015d4 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e167      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_OscConfig+0x240>)
 8001de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x200>
 8001dee:	e01b      	b.n	8001e28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_OscConfig+0x248>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df6:	f7ff fbed 	bl	80015d4 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfc:	e00e      	b.n	8001e1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dfe:	f7ff fbe9 	bl	80015d4 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d907      	bls.n	8001e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e150      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
 8001e10:	40023800 	.word	0x40023800
 8001e14:	42470000 	.word	0x42470000
 8001e18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	4b88      	ldr	r3, [pc, #544]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1ea      	bne.n	8001dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 8097 	beq.w	8001f64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3a:	4b81      	ldr	r3, [pc, #516]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10f      	bne.n	8001e66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	4b7d      	ldr	r3, [pc, #500]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a7c      	ldr	r2, [pc, #496]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b7a      	ldr	r3, [pc, #488]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e62:	2301      	movs	r3, #1
 8001e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e66:	4b77      	ldr	r3, [pc, #476]	; (8002044 <HAL_RCC_OscConfig+0x474>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d118      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e72:	4b74      	ldr	r3, [pc, #464]	; (8002044 <HAL_RCC_OscConfig+0x474>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a73      	ldr	r2, [pc, #460]	; (8002044 <HAL_RCC_OscConfig+0x474>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fba9 	bl	80015d4 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e86:	f7ff fba5 	bl	80015d4 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e10c      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <HAL_RCC_OscConfig+0x474>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x2ea>
 8001eac:	4b64      	ldr	r3, [pc, #400]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb0:	4a63      	ldr	r2, [pc, #396]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb8:	e01c      	b.n	8001ef4 <HAL_RCC_OscConfig+0x324>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b05      	cmp	r3, #5
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x30c>
 8001ec2:	4b5f      	ldr	r3, [pc, #380]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	4a5e      	ldr	r2, [pc, #376]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ece:	4b5c      	ldr	r3, [pc, #368]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	4a5b      	ldr	r2, [pc, #364]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0x324>
 8001edc:	4b58      	ldr	r3, [pc, #352]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee0:	4a57      	ldr	r2, [pc, #348]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	f023 0301 	bic.w	r3, r3, #1
 8001ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee8:	4b55      	ldr	r3, [pc, #340]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eec:	4a54      	ldr	r2, [pc, #336]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001eee:	f023 0304 	bic.w	r3, r3, #4
 8001ef2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d015      	beq.n	8001f28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efc:	f7ff fb6a 	bl	80015d4 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f04:	f7ff fb66 	bl	80015d4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e0cb      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1a:	4b49      	ldr	r3, [pc, #292]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0ee      	beq.n	8001f04 <HAL_RCC_OscConfig+0x334>
 8001f26:	e014      	b.n	8001f52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f28:	f7ff fb54 	bl	80015d4 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f30:	f7ff fb50 	bl	80015d4 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e0b5      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f46:	4b3e      	ldr	r3, [pc, #248]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1ee      	bne.n	8001f30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f52:	7dfb      	ldrb	r3, [r7, #23]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f58:	4b39      	ldr	r3, [pc, #228]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	4a38      	ldr	r2, [pc, #224]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80a1 	beq.w	80020b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f6e:	4b34      	ldr	r3, [pc, #208]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d05c      	beq.n	8002034 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d141      	bne.n	8002006 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b31      	ldr	r3, [pc, #196]	; (8002048 <HAL_RCC_OscConfig+0x478>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff fb24 	bl	80015d4 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f90:	f7ff fb20 	bl	80015d4 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e087      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	4b27      	ldr	r3, [pc, #156]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	019b      	lsls	r3, r3, #6
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	085b      	lsrs	r3, r3, #1
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	041b      	lsls	r3, r3, #16
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	491b      	ldr	r1, [pc, #108]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <HAL_RCC_OscConfig+0x478>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7ff faf9 	bl	80015d4 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7ff faf5 	bl	80015d4 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e05c      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x416>
 8002004:	e054      	b.n	80020b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_RCC_OscConfig+0x478>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7ff fae2 	bl	80015d4 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002014:	f7ff fade 	bl	80015d4 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e045      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_RCC_OscConfig+0x470>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x444>
 8002032:	e03d      	b.n	80020b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d107      	bne.n	800204c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e038      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
 8002040:	40023800 	.word	0x40023800
 8002044:	40007000 	.word	0x40007000
 8002048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800204c:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_RCC_OscConfig+0x4ec>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d028      	beq.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d121      	bne.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d11a      	bne.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800207c:	4013      	ands	r3, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002084:	4293      	cmp	r3, r2
 8002086:	d111      	bne.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	085b      	lsrs	r3, r3, #1
 8002094:	3b01      	subs	r3, #1
 8002096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d107      	bne.n	80020ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800

080020c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0cc      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d4:	4b68      	ldr	r3, [pc, #416]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d90c      	bls.n	80020fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b65      	ldr	r3, [pc, #404]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b63      	ldr	r3, [pc, #396]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0b8      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002114:	4b59      	ldr	r3, [pc, #356]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4a58      	ldr	r2, [pc, #352]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800211e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800212c:	4b53      	ldr	r3, [pc, #332]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	4a52      	ldr	r2, [pc, #328]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b50      	ldr	r3, [pc, #320]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	494d      	ldr	r1, [pc, #308]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d044      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b47      	ldr	r3, [pc, #284]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d119      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d003      	beq.n	800217e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800217a:	2b03      	cmp	r3, #3
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	4b3f      	ldr	r3, [pc, #252]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e06f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e067      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219e:	4b37      	ldr	r3, [pc, #220]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f023 0203 	bic.w	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4934      	ldr	r1, [pc, #208]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b0:	f7ff fa10 	bl	80015d4 <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7ff fa0c 	bl	80015d4 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e04f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	4b2b      	ldr	r3, [pc, #172]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 020c 	and.w	r2, r3, #12
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1eb      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d20c      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e032      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4916      	ldr	r1, [pc, #88]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	490e      	ldr	r1, [pc, #56]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002246:	f000 f821 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800224a:	4602      	mov	r2, r0
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	490a      	ldr	r1, [pc, #40]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	5ccb      	ldrb	r3, [r1, r3]
 800225a:	fa22 f303 	lsr.w	r3, r2, r3
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff f970 	bl	800154c <HAL_InitTick>

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023c00 	.word	0x40023c00
 800227c:	40023800 	.word	0x40023800
 8002280:	0800311c 	.word	0x0800311c
 8002284:	20000000 	.word	0x20000000
 8002288:	20000004 	.word	0x20000004

0800228c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002290:	b094      	sub	sp, #80	; 0x50
 8002292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	647b      	str	r3, [r7, #68]	; 0x44
 8002298:	2300      	movs	r3, #0
 800229a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800229c:	2300      	movs	r3, #0
 800229e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a4:	4b79      	ldr	r3, [pc, #484]	; (800248c <HAL_RCC_GetSysClockFreq+0x200>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d00d      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0x40>
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	f200 80e1 	bhi.w	8002478 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x34>
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d003      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022be:	e0db      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022c0:	4b73      	ldr	r3, [pc, #460]	; (8002490 <HAL_RCC_GetSysClockFreq+0x204>)
 80022c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80022c4:	e0db      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022c6:	4b73      	ldr	r3, [pc, #460]	; (8002494 <HAL_RCC_GetSysClockFreq+0x208>)
 80022c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022ca:	e0d8      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022cc:	4b6f      	ldr	r3, [pc, #444]	; (800248c <HAL_RCC_GetSysClockFreq+0x200>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d6:	4b6d      	ldr	r3, [pc, #436]	; (800248c <HAL_RCC_GetSysClockFreq+0x200>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d063      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e2:	4b6a      	ldr	r3, [pc, #424]	; (800248c <HAL_RCC_GetSysClockFreq+0x200>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	099b      	lsrs	r3, r3, #6
 80022e8:	2200      	movs	r2, #0
 80022ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80022ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f4:	633b      	str	r3, [r7, #48]	; 0x30
 80022f6:	2300      	movs	r3, #0
 80022f8:	637b      	str	r3, [r7, #52]	; 0x34
 80022fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022fe:	4622      	mov	r2, r4
 8002300:	462b      	mov	r3, r5
 8002302:	f04f 0000 	mov.w	r0, #0
 8002306:	f04f 0100 	mov.w	r1, #0
 800230a:	0159      	lsls	r1, r3, #5
 800230c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002310:	0150      	lsls	r0, r2, #5
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4621      	mov	r1, r4
 8002318:	1a51      	subs	r1, r2, r1
 800231a:	6139      	str	r1, [r7, #16]
 800231c:	4629      	mov	r1, r5
 800231e:	eb63 0301 	sbc.w	r3, r3, r1
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002330:	4659      	mov	r1, fp
 8002332:	018b      	lsls	r3, r1, #6
 8002334:	4651      	mov	r1, sl
 8002336:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800233a:	4651      	mov	r1, sl
 800233c:	018a      	lsls	r2, r1, #6
 800233e:	4651      	mov	r1, sl
 8002340:	ebb2 0801 	subs.w	r8, r2, r1
 8002344:	4659      	mov	r1, fp
 8002346:	eb63 0901 	sbc.w	r9, r3, r1
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800235a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800235e:	4690      	mov	r8, r2
 8002360:	4699      	mov	r9, r3
 8002362:	4623      	mov	r3, r4
 8002364:	eb18 0303 	adds.w	r3, r8, r3
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	462b      	mov	r3, r5
 800236c:	eb49 0303 	adc.w	r3, r9, r3
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800237e:	4629      	mov	r1, r5
 8002380:	024b      	lsls	r3, r1, #9
 8002382:	4621      	mov	r1, r4
 8002384:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002388:	4621      	mov	r1, r4
 800238a:	024a      	lsls	r2, r1, #9
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002392:	2200      	movs	r2, #0
 8002394:	62bb      	str	r3, [r7, #40]	; 0x28
 8002396:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002398:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800239c:	f7fd ff18 	bl	80001d0 <__aeabi_uldivmod>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4613      	mov	r3, r2
 80023a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a8:	e058      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023aa:	4b38      	ldr	r3, [pc, #224]	; (800248c <HAL_RCC_GetSysClockFreq+0x200>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	099b      	lsrs	r3, r3, #6
 80023b0:	2200      	movs	r2, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	4611      	mov	r1, r2
 80023b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023ba:	623b      	str	r3, [r7, #32]
 80023bc:	2300      	movs	r3, #0
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
 80023c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023c4:	4642      	mov	r2, r8
 80023c6:	464b      	mov	r3, r9
 80023c8:	f04f 0000 	mov.w	r0, #0
 80023cc:	f04f 0100 	mov.w	r1, #0
 80023d0:	0159      	lsls	r1, r3, #5
 80023d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023d6:	0150      	lsls	r0, r2, #5
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4641      	mov	r1, r8
 80023de:	ebb2 0a01 	subs.w	sl, r2, r1
 80023e2:	4649      	mov	r1, r9
 80023e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023fc:	ebb2 040a 	subs.w	r4, r2, sl
 8002400:	eb63 050b 	sbc.w	r5, r3, fp
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	00eb      	lsls	r3, r5, #3
 800240e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002412:	00e2      	lsls	r2, r4, #3
 8002414:	4614      	mov	r4, r2
 8002416:	461d      	mov	r5, r3
 8002418:	4643      	mov	r3, r8
 800241a:	18e3      	adds	r3, r4, r3
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	464b      	mov	r3, r9
 8002420:	eb45 0303 	adc.w	r3, r5, r3
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002432:	4629      	mov	r1, r5
 8002434:	028b      	lsls	r3, r1, #10
 8002436:	4621      	mov	r1, r4
 8002438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800243c:	4621      	mov	r1, r4
 800243e:	028a      	lsls	r2, r1, #10
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002446:	2200      	movs	r2, #0
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	61fa      	str	r2, [r7, #28]
 800244c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002450:	f7fd febe 	bl	80001d0 <__aeabi_uldivmod>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4613      	mov	r3, r2
 800245a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_RCC_GetSysClockFreq+0x200>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	3301      	adds	r3, #1
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800246c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800246e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002476:	e002      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_RCC_GetSysClockFreq+0x204>)
 800247a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800247c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800247e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002480:	4618      	mov	r0, r3
 8002482:	3750      	adds	r7, #80	; 0x50
 8002484:	46bd      	mov	sp, r7
 8002486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	00f42400 	.word	0x00f42400
 8002494:	007a1200 	.word	0x007a1200

08002498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <HAL_RCC_GetHCLKFreq+0x14>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	20000000 	.word	0x20000000

080024b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024b4:	f7ff fff0 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	0a9b      	lsrs	r3, r3, #10
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	4903      	ldr	r1, [pc, #12]	; (80024d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c6:	5ccb      	ldrb	r3, [r1, r3]
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40023800 	.word	0x40023800
 80024d4:	0800312c 	.word	0x0800312c

080024d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024dc:	f7ff ffdc 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	0b5b      	lsrs	r3, r3, #13
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	4903      	ldr	r1, [pc, #12]	; (80024fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40023800 	.word	0x40023800
 80024fc:	0800312c 	.word	0x0800312c

08002500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e03f      	b.n	8002592 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe ff46 	bl	80013b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2224      	movs	r2, #36	; 0x24
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f929 	bl	800279c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b08a      	sub	sp, #40	; 0x28
 800259e:	af02      	add	r7, sp, #8
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	603b      	str	r3, [r7, #0]
 80025a6:	4613      	mov	r3, r2
 80025a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	d17c      	bne.n	80026b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <HAL_UART_Transmit+0x2c>
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e075      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_UART_Transmit+0x3e>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e06e      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2221      	movs	r2, #33	; 0x21
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025ee:	f7fe fff1 	bl	80015d4 <HAL_GetTick>
 80025f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	88fa      	ldrh	r2, [r7, #6]
 80025f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	88fa      	ldrh	r2, [r7, #6]
 80025fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002608:	d108      	bne.n	800261c <HAL_UART_Transmit+0x82>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d104      	bne.n	800261c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	e003      	b.n	8002624 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800262c:	e02a      	b.n	8002684 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2200      	movs	r2, #0
 8002636:	2180      	movs	r1, #128	; 0x80
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f840 	bl	80026be <UART_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e036      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10b      	bne.n	8002666 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800265c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	3302      	adds	r3, #2
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	e007      	b.n	8002676 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	781a      	ldrb	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	3301      	adds	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1cf      	bne.n	800262e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2200      	movs	r2, #0
 8002696:	2140      	movs	r1, #64	; 0x40
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f810 	bl	80026be <UART_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e006      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	e000      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
  }
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3720      	adds	r7, #32
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b090      	sub	sp, #64	; 0x40
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	4613      	mov	r3, r2
 80026cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ce:	e050      	b.n	8002772 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d6:	d04c      	beq.n	8002772 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <UART_WaitOnFlagUntilTimeout+0x30>
 80026de:	f7fe ff79 	bl	80015d4 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d241      	bcs.n	8002772 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	330c      	adds	r3, #12
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	e853 3f00 	ldrex	r3, [r3]
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	330c      	adds	r3, #12
 800270c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800270e:	637a      	str	r2, [r7, #52]	; 0x34
 8002710:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002712:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002716:	e841 2300 	strex	r3, r2, [r1]
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e5      	bne.n	80026ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3314      	adds	r3, #20
 8002728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	e853 3f00 	ldrex	r3, [r3]
 8002730:	613b      	str	r3, [r7, #16]
   return(result);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	63bb      	str	r3, [r7, #56]	; 0x38
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3314      	adds	r3, #20
 8002740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002742:	623a      	str	r2, [r7, #32]
 8002744:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002746:	69f9      	ldr	r1, [r7, #28]
 8002748:	6a3a      	ldr	r2, [r7, #32]
 800274a:	e841 2300 	strex	r3, r2, [r1]
 800274e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1e5      	bne.n	8002722 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e00f      	b.n	8002792 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4013      	ands	r3, r2
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	429a      	cmp	r2, r3
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	429a      	cmp	r2, r3
 800278e:	d09f      	beq.n	80026d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3740      	adds	r7, #64	; 0x40
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800279c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a0:	b0c0      	sub	sp, #256	; 0x100
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b8:	68d9      	ldr	r1, [r3, #12]
 80027ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	ea40 0301 	orr.w	r3, r0, r1
 80027c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	431a      	orrs	r2, r3
 80027dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027f4:	f021 010c 	bic.w	r1, r1, #12
 80027f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002802:	430b      	orrs	r3, r1
 8002804:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002816:	6999      	ldr	r1, [r3, #24]
 8002818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	ea40 0301 	orr.w	r3, r0, r1
 8002822:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4b8f      	ldr	r3, [pc, #572]	; (8002a68 <UART_SetConfig+0x2cc>)
 800282c:	429a      	cmp	r2, r3
 800282e:	d005      	beq.n	800283c <UART_SetConfig+0xa0>
 8002830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	4b8d      	ldr	r3, [pc, #564]	; (8002a6c <UART_SetConfig+0x2d0>)
 8002838:	429a      	cmp	r2, r3
 800283a:	d104      	bne.n	8002846 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800283c:	f7ff fe4c 	bl	80024d8 <HAL_RCC_GetPCLK2Freq>
 8002840:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002844:	e003      	b.n	800284e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002846:	f7ff fe33 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
 800284a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800284e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002858:	f040 810c 	bne.w	8002a74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800285c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002860:	2200      	movs	r2, #0
 8002862:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002866:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800286a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800286e:	4622      	mov	r2, r4
 8002870:	462b      	mov	r3, r5
 8002872:	1891      	adds	r1, r2, r2
 8002874:	65b9      	str	r1, [r7, #88]	; 0x58
 8002876:	415b      	adcs	r3, r3
 8002878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800287a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800287e:	4621      	mov	r1, r4
 8002880:	eb12 0801 	adds.w	r8, r2, r1
 8002884:	4629      	mov	r1, r5
 8002886:	eb43 0901 	adc.w	r9, r3, r1
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800289a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800289e:	4690      	mov	r8, r2
 80028a0:	4699      	mov	r9, r3
 80028a2:	4623      	mov	r3, r4
 80028a4:	eb18 0303 	adds.w	r3, r8, r3
 80028a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028ac:	462b      	mov	r3, r5
 80028ae:	eb49 0303 	adc.w	r3, r9, r3
 80028b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80028c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80028ca:	460b      	mov	r3, r1
 80028cc:	18db      	adds	r3, r3, r3
 80028ce:	653b      	str	r3, [r7, #80]	; 0x50
 80028d0:	4613      	mov	r3, r2
 80028d2:	eb42 0303 	adc.w	r3, r2, r3
 80028d6:	657b      	str	r3, [r7, #84]	; 0x54
 80028d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80028e0:	f7fd fc76 	bl	80001d0 <__aeabi_uldivmod>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4b61      	ldr	r3, [pc, #388]	; (8002a70 <UART_SetConfig+0x2d4>)
 80028ea:	fba3 2302 	umull	r2, r3, r3, r2
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	011c      	lsls	r4, r3, #4
 80028f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002900:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002904:	4642      	mov	r2, r8
 8002906:	464b      	mov	r3, r9
 8002908:	1891      	adds	r1, r2, r2
 800290a:	64b9      	str	r1, [r7, #72]	; 0x48
 800290c:	415b      	adcs	r3, r3
 800290e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002910:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002914:	4641      	mov	r1, r8
 8002916:	eb12 0a01 	adds.w	sl, r2, r1
 800291a:	4649      	mov	r1, r9
 800291c:	eb43 0b01 	adc.w	fp, r3, r1
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800292c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002930:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002934:	4692      	mov	sl, r2
 8002936:	469b      	mov	fp, r3
 8002938:	4643      	mov	r3, r8
 800293a:	eb1a 0303 	adds.w	r3, sl, r3
 800293e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002942:	464b      	mov	r3, r9
 8002944:	eb4b 0303 	adc.w	r3, fp, r3
 8002948:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800294c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002958:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800295c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002960:	460b      	mov	r3, r1
 8002962:	18db      	adds	r3, r3, r3
 8002964:	643b      	str	r3, [r7, #64]	; 0x40
 8002966:	4613      	mov	r3, r2
 8002968:	eb42 0303 	adc.w	r3, r2, r3
 800296c:	647b      	str	r3, [r7, #68]	; 0x44
 800296e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002972:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002976:	f7fd fc2b 	bl	80001d0 <__aeabi_uldivmod>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4611      	mov	r1, r2
 8002980:	4b3b      	ldr	r3, [pc, #236]	; (8002a70 <UART_SetConfig+0x2d4>)
 8002982:	fba3 2301 	umull	r2, r3, r3, r1
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2264      	movs	r2, #100	; 0x64
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	1acb      	subs	r3, r1, r3
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002996:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <UART_SetConfig+0x2d4>)
 8002998:	fba3 2302 	umull	r2, r3, r3, r2
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029a4:	441c      	add	r4, r3
 80029a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029aa:	2200      	movs	r2, #0
 80029ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80029b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80029b8:	4642      	mov	r2, r8
 80029ba:	464b      	mov	r3, r9
 80029bc:	1891      	adds	r1, r2, r2
 80029be:	63b9      	str	r1, [r7, #56]	; 0x38
 80029c0:	415b      	adcs	r3, r3
 80029c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029c8:	4641      	mov	r1, r8
 80029ca:	1851      	adds	r1, r2, r1
 80029cc:	6339      	str	r1, [r7, #48]	; 0x30
 80029ce:	4649      	mov	r1, r9
 80029d0:	414b      	adcs	r3, r1
 80029d2:	637b      	str	r3, [r7, #52]	; 0x34
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80029e0:	4659      	mov	r1, fp
 80029e2:	00cb      	lsls	r3, r1, #3
 80029e4:	4651      	mov	r1, sl
 80029e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ea:	4651      	mov	r1, sl
 80029ec:	00ca      	lsls	r2, r1, #3
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	4642      	mov	r2, r8
 80029f6:	189b      	adds	r3, r3, r2
 80029f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029fc:	464b      	mov	r3, r9
 80029fe:	460a      	mov	r2, r1
 8002a00:	eb42 0303 	adc.w	r3, r2, r3
 8002a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	18db      	adds	r3, r3, r3
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a22:	4613      	mov	r3, r2
 8002a24:	eb42 0303 	adc.w	r3, r2, r3
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a32:	f7fd fbcd 	bl	80001d0 <__aeabi_uldivmod>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <UART_SetConfig+0x2d4>)
 8002a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	2164      	movs	r1, #100	; 0x64
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	3332      	adds	r3, #50	; 0x32
 8002a4e:	4a08      	ldr	r2, [pc, #32]	; (8002a70 <UART_SetConfig+0x2d4>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	f003 0207 	and.w	r2, r3, #7
 8002a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4422      	add	r2, r4
 8002a62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a64:	e106      	b.n	8002c74 <UART_SetConfig+0x4d8>
 8002a66:	bf00      	nop
 8002a68:	40011000 	.word	0x40011000
 8002a6c:	40011400 	.word	0x40011400
 8002a70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a86:	4642      	mov	r2, r8
 8002a88:	464b      	mov	r3, r9
 8002a8a:	1891      	adds	r1, r2, r2
 8002a8c:	6239      	str	r1, [r7, #32]
 8002a8e:	415b      	adcs	r3, r3
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
 8002a92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a96:	4641      	mov	r1, r8
 8002a98:	1854      	adds	r4, r2, r1
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	eb43 0501 	adc.w	r5, r3, r1
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	00eb      	lsls	r3, r5, #3
 8002aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aae:	00e2      	lsls	r2, r4, #3
 8002ab0:	4614      	mov	r4, r2
 8002ab2:	461d      	mov	r5, r3
 8002ab4:	4643      	mov	r3, r8
 8002ab6:	18e3      	adds	r3, r4, r3
 8002ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002abc:	464b      	mov	r3, r9
 8002abe:	eb45 0303 	adc.w	r3, r5, r3
 8002ac2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ad2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	008b      	lsls	r3, r1, #2
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aec:	4621      	mov	r1, r4
 8002aee:	008a      	lsls	r2, r1, #2
 8002af0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002af4:	f7fd fb6c 	bl	80001d0 <__aeabi_uldivmod>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4b60      	ldr	r3, [pc, #384]	; (8002c80 <UART_SetConfig+0x4e4>)
 8002afe:	fba3 2302 	umull	r2, r3, r3, r2
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	011c      	lsls	r4, r3, #4
 8002b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b18:	4642      	mov	r2, r8
 8002b1a:	464b      	mov	r3, r9
 8002b1c:	1891      	adds	r1, r2, r2
 8002b1e:	61b9      	str	r1, [r7, #24]
 8002b20:	415b      	adcs	r3, r3
 8002b22:	61fb      	str	r3, [r7, #28]
 8002b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b28:	4641      	mov	r1, r8
 8002b2a:	1851      	adds	r1, r2, r1
 8002b2c:	6139      	str	r1, [r7, #16]
 8002b2e:	4649      	mov	r1, r9
 8002b30:	414b      	adcs	r3, r1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b40:	4659      	mov	r1, fp
 8002b42:	00cb      	lsls	r3, r1, #3
 8002b44:	4651      	mov	r1, sl
 8002b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b4a:	4651      	mov	r1, sl
 8002b4c:	00ca      	lsls	r2, r1, #3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	4603      	mov	r3, r0
 8002b54:	4642      	mov	r2, r8
 8002b56:	189b      	adds	r3, r3, r2
 8002b58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b5c:	464b      	mov	r3, r9
 8002b5e:	460a      	mov	r2, r1
 8002b60:	eb42 0303 	adc.w	r3, r2, r3
 8002b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b80:	4649      	mov	r1, r9
 8002b82:	008b      	lsls	r3, r1, #2
 8002b84:	4641      	mov	r1, r8
 8002b86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b8a:	4641      	mov	r1, r8
 8002b8c:	008a      	lsls	r2, r1, #2
 8002b8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b92:	f7fd fb1d 	bl	80001d0 <__aeabi_uldivmod>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4b38      	ldr	r3, [pc, #224]	; (8002c80 <UART_SetConfig+0x4e4>)
 8002b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2264      	movs	r2, #100	; 0x64
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	1acb      	subs	r3, r1, r3
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	3332      	adds	r3, #50	; 0x32
 8002bb0:	4a33      	ldr	r2, [pc, #204]	; (8002c80 <UART_SetConfig+0x4e4>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bbc:	441c      	add	r4, r3
 8002bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	673b      	str	r3, [r7, #112]	; 0x70
 8002bc6:	677a      	str	r2, [r7, #116]	; 0x74
 8002bc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002bcc:	4642      	mov	r2, r8
 8002bce:	464b      	mov	r3, r9
 8002bd0:	1891      	adds	r1, r2, r2
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	415b      	adcs	r3, r3
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bdc:	4641      	mov	r1, r8
 8002bde:	1851      	adds	r1, r2, r1
 8002be0:	6039      	str	r1, [r7, #0]
 8002be2:	4649      	mov	r1, r9
 8002be4:	414b      	adcs	r3, r1
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002bf4:	4659      	mov	r1, fp
 8002bf6:	00cb      	lsls	r3, r1, #3
 8002bf8:	4651      	mov	r1, sl
 8002bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bfe:	4651      	mov	r1, sl
 8002c00:	00ca      	lsls	r2, r1, #3
 8002c02:	4610      	mov	r0, r2
 8002c04:	4619      	mov	r1, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	4642      	mov	r2, r8
 8002c0a:	189b      	adds	r3, r3, r2
 8002c0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c0e:	464b      	mov	r3, r9
 8002c10:	460a      	mov	r2, r1
 8002c12:	eb42 0303 	adc.w	r3, r2, r3
 8002c16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	663b      	str	r3, [r7, #96]	; 0x60
 8002c22:	667a      	str	r2, [r7, #100]	; 0x64
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c30:	4649      	mov	r1, r9
 8002c32:	008b      	lsls	r3, r1, #2
 8002c34:	4641      	mov	r1, r8
 8002c36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c3a:	4641      	mov	r1, r8
 8002c3c:	008a      	lsls	r2, r1, #2
 8002c3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c42:	f7fd fac5 	bl	80001d0 <__aeabi_uldivmod>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <UART_SetConfig+0x4e4>)
 8002c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	2164      	movs	r1, #100	; 0x64
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	3332      	adds	r3, #50	; 0x32
 8002c5e:	4a08      	ldr	r2, [pc, #32]	; (8002c80 <UART_SetConfig+0x4e4>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	f003 020f 	and.w	r2, r3, #15
 8002c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4422      	add	r2, r4
 8002c72:	609a      	str	r2, [r3, #8]
}
 8002c74:	bf00      	nop
 8002c76:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c80:	51eb851f 	.word	0x51eb851f

08002c84 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	601a      	str	r2, [r3, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6892      	ldr	r2, [r2, #8]
 8002ce2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6852      	ldr	r2, [r2, #4]
 8002cec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d103      	bne.n	8002d00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	1e5a      	subs	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d2a:	4b4e      	ldr	r3, [pc, #312]	; (8002e64 <xTaskIncrementTick+0x144>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f040 808e 	bne.w	8002e50 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d34:	4b4c      	ldr	r3, [pc, #304]	; (8002e68 <xTaskIncrementTick+0x148>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d3c:	4a4a      	ldr	r2, [pc, #296]	; (8002e68 <xTaskIncrementTick+0x148>)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d120      	bne.n	8002d8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d48:	4b48      	ldr	r3, [pc, #288]	; (8002e6c <xTaskIncrementTick+0x14c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d56:	f383 8811 	msr	BASEPRI, r3
 8002d5a:	f3bf 8f6f 	isb	sy
 8002d5e:	f3bf 8f4f 	dsb	sy
 8002d62:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d64:	bf00      	nop
 8002d66:	e7fe      	b.n	8002d66 <xTaskIncrementTick+0x46>
 8002d68:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <xTaskIncrementTick+0x14c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <xTaskIncrementTick+0x150>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a3e      	ldr	r2, [pc, #248]	; (8002e6c <xTaskIncrementTick+0x14c>)
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4a3e      	ldr	r2, [pc, #248]	; (8002e70 <xTaskIncrementTick+0x150>)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	4b3d      	ldr	r3, [pc, #244]	; (8002e74 <xTaskIncrementTick+0x154>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3301      	adds	r3, #1
 8002d82:	4a3c      	ldr	r2, [pc, #240]	; (8002e74 <xTaskIncrementTick+0x154>)
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	f000 f8df 	bl	8002f48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d8a:	4b3b      	ldr	r3, [pc, #236]	; (8002e78 <xTaskIncrementTick+0x158>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d348      	bcc.n	8002e26 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d94:	4b35      	ldr	r3, [pc, #212]	; (8002e6c <xTaskIncrementTick+0x14c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d104      	bne.n	8002da8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d9e:	4b36      	ldr	r3, [pc, #216]	; (8002e78 <xTaskIncrementTick+0x158>)
 8002da0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002da4:	601a      	str	r2, [r3, #0]
					break;
 8002da6:	e03e      	b.n	8002e26 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002da8:	4b30      	ldr	r3, [pc, #192]	; (8002e6c <xTaskIncrementTick+0x14c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d203      	bcs.n	8002dc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002dc0:	4a2d      	ldr	r2, [pc, #180]	; (8002e78 <xTaskIncrementTick+0x158>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002dc6:	e02e      	b.n	8002e26 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff7d 	bl	8002ccc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d004      	beq.n	8002de4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	3318      	adds	r3, #24
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ff74 	bl	8002ccc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	2201      	movs	r2, #1
 8002dea:	409a      	lsls	r2, r3
 8002dec:	4b23      	ldr	r3, [pc, #140]	; (8002e7c <xTaskIncrementTick+0x15c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <xTaskIncrementTick+0x15c>)
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4a1f      	ldr	r2, [pc, #124]	; (8002e80 <xTaskIncrementTick+0x160>)
 8002e04:	441a      	add	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	f7ff ff39 	bl	8002c84 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e16:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <xTaskIncrementTick+0x164>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d3b9      	bcc.n	8002d94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002e20:	2301      	movs	r3, #1
 8002e22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e24:	e7b6      	b.n	8002d94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e26:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <xTaskIncrementTick+0x164>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2c:	4914      	ldr	r1, [pc, #80]	; (8002e80 <xTaskIncrementTick+0x160>)
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d901      	bls.n	8002e42 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002e42:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <xTaskIncrementTick+0x168>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e004      	b.n	8002e5a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002e50:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <xTaskIncrementTick+0x16c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3301      	adds	r3, #1
 8002e56:	4a0d      	ldr	r2, [pc, #52]	; (8002e8c <xTaskIncrementTick+0x16c>)
 8002e58:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002e5a:	697b      	ldr	r3, [r7, #20]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	2000012c 	.word	0x2000012c
 8002e68:	20000110 	.word	0x20000110
 8002e6c:	20000108 	.word	0x20000108
 8002e70:	2000010c 	.word	0x2000010c
 8002e74:	20000124 	.word	0x20000124
 8002e78:	20000128 	.word	0x20000128
 8002e7c:	20000114 	.word	0x20000114
 8002e80:	2000007c 	.word	0x2000007c
 8002e84:	20000078 	.word	0x20000078
 8002e88:	20000120 	.word	0x20000120
 8002e8c:	2000011c 	.word	0x2000011c

08002e90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e96:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <vTaskSwitchContext+0xa4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <vTaskSwitchContext+0xa8>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ea4:	e03f      	b.n	8002f26 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002ea6:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <vTaskSwitchContext+0xa8>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eac:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <vTaskSwitchContext+0xac>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	fab3 f383 	clz	r3, r3
 8002eb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002eba:	7afb      	ldrb	r3, [r7, #11]
 8002ebc:	f1c3 031f 	rsb	r3, r3, #31
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	491f      	ldr	r1, [pc, #124]	; (8002f40 <vTaskSwitchContext+0xb0>)
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10a      	bne.n	8002eec <vTaskSwitchContext+0x5c>
	__asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	607b      	str	r3, [r7, #4]
}
 8002ee8:	bf00      	nop
 8002eea:	e7fe      	b.n	8002eea <vTaskSwitchContext+0x5a>
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <vTaskSwitchContext+0xb0>)
 8002ef8:	4413      	add	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	3308      	adds	r3, #8
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d104      	bne.n	8002f1c <vTaskSwitchContext+0x8c>
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	605a      	str	r2, [r3, #4]
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	4a08      	ldr	r2, [pc, #32]	; (8002f44 <vTaskSwitchContext+0xb4>)
 8002f24:	6013      	str	r3, [r2, #0]
}
 8002f26:	bf00      	nop
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	2000012c 	.word	0x2000012c
 8002f38:	20000120 	.word	0x20000120
 8002f3c:	20000114 	.word	0x20000114
 8002f40:	2000007c 	.word	0x2000007c
 8002f44:	20000078 	.word	0x20000078

08002f48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <prvResetNextTaskUnblockTime+0x38>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d104      	bne.n	8002f62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <prvResetNextTaskUnblockTime+0x3c>)
 8002f5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002f60:	e008      	b.n	8002f74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <prvResetNextTaskUnblockTime+0x38>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <prvResetNextTaskUnblockTime+0x3c>)
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	20000108 	.word	0x20000108
 8002f84:	20000128 	.word	0x20000128

08002f88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <xTaskGetSchedulerState+0x34>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002f96:	2301      	movs	r3, #1
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	e008      	b.n	8002fae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f9c:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <xTaskGetSchedulerState+0x38>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	607b      	str	r3, [r7, #4]
 8002fa8:	e001      	b.n	8002fae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002faa:	2300      	movs	r3, #0
 8002fac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002fae:	687b      	ldr	r3, [r7, #4]
	}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	20000118 	.word	0x20000118
 8002fc0:	2000012c 	.word	0x2000012c
	...

08002fd0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002fd0:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <pxCurrentTCBConst2>)
 8002fd2:	6819      	ldr	r1, [r3, #0]
 8002fd4:	6808      	ldr	r0, [r1, #0]
 8002fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fda:	f380 8809 	msr	PSP, r0
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f04f 0000 	mov.w	r0, #0
 8002fe6:	f380 8811 	msr	BASEPRI, r0
 8002fea:	4770      	bx	lr
 8002fec:	f3af 8000 	nop.w

08002ff0 <pxCurrentTCBConst2>:
 8002ff0:	20000078 	.word	0x20000078
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop
	...

08003000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003000:	f3ef 8009 	mrs	r0, PSP
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	4b15      	ldr	r3, [pc, #84]	; (8003060 <pxCurrentTCBConst>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	f01e 0f10 	tst.w	lr, #16
 8003010:	bf08      	it	eq
 8003012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800301a:	6010      	str	r0, [r2, #0]
 800301c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003024:	f380 8811 	msr	BASEPRI, r0
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f7ff ff2e 	bl	8002e90 <vTaskSwitchContext>
 8003034:	f04f 0000 	mov.w	r0, #0
 8003038:	f380 8811 	msr	BASEPRI, r0
 800303c:	bc09      	pop	{r0, r3}
 800303e:	6819      	ldr	r1, [r3, #0]
 8003040:	6808      	ldr	r0, [r1, #0]
 8003042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003046:	f01e 0f10 	tst.w	lr, #16
 800304a:	bf08      	it	eq
 800304c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003050:	f380 8809 	msr	PSP, r0
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	f3af 8000 	nop.w

08003060 <pxCurrentTCBConst>:
 8003060:	20000078 	.word	0x20000078
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop

08003068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
	__asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	607b      	str	r3, [r7, #4]
}
 8003080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003082:	f7ff fe4d 	bl	8002d20 <xTaskIncrementTick>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <xPortSysTickHandler+0x40>)
 800308e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	2300      	movs	r3, #0
 8003096:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800309e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	e000ed04 	.word	0xe000ed04

080030ac <memset>:
 80030ac:	4402      	add	r2, r0
 80030ae:	4603      	mov	r3, r0
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d100      	bne.n	80030b6 <memset+0xa>
 80030b4:	4770      	bx	lr
 80030b6:	f803 1b01 	strb.w	r1, [r3], #1
 80030ba:	e7f9      	b.n	80030b0 <memset+0x4>

080030bc <__libc_init_array>:
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	4d0d      	ldr	r5, [pc, #52]	; (80030f4 <__libc_init_array+0x38>)
 80030c0:	4c0d      	ldr	r4, [pc, #52]	; (80030f8 <__libc_init_array+0x3c>)
 80030c2:	1b64      	subs	r4, r4, r5
 80030c4:	10a4      	asrs	r4, r4, #2
 80030c6:	2600      	movs	r6, #0
 80030c8:	42a6      	cmp	r6, r4
 80030ca:	d109      	bne.n	80030e0 <__libc_init_array+0x24>
 80030cc:	4d0b      	ldr	r5, [pc, #44]	; (80030fc <__libc_init_array+0x40>)
 80030ce:	4c0c      	ldr	r4, [pc, #48]	; (8003100 <__libc_init_array+0x44>)
 80030d0:	f000 f818 	bl	8003104 <_init>
 80030d4:	1b64      	subs	r4, r4, r5
 80030d6:	10a4      	asrs	r4, r4, #2
 80030d8:	2600      	movs	r6, #0
 80030da:	42a6      	cmp	r6, r4
 80030dc:	d105      	bne.n	80030ea <__libc_init_array+0x2e>
 80030de:	bd70      	pop	{r4, r5, r6, pc}
 80030e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e4:	4798      	blx	r3
 80030e6:	3601      	adds	r6, #1
 80030e8:	e7ee      	b.n	80030c8 <__libc_init_array+0xc>
 80030ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ee:	4798      	blx	r3
 80030f0:	3601      	adds	r6, #1
 80030f2:	e7f2      	b.n	80030da <__libc_init_array+0x1e>
 80030f4:	0800313c 	.word	0x0800313c
 80030f8:	0800313c 	.word	0x0800313c
 80030fc:	0800313c 	.word	0x0800313c
 8003100:	08003140 	.word	0x08003140

08003104 <_init>:
 8003104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003106:	bf00      	nop
 8003108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310a:	bc08      	pop	{r3}
 800310c:	469e      	mov	lr, r3
 800310e:	4770      	bx	lr

08003110 <_fini>:
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003112:	bf00      	nop
 8003114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003116:	bc08      	pop	{r3}
 8003118:	469e      	mov	lr, r3
 800311a:	4770      	bx	lr
